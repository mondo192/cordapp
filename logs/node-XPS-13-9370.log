[INFO ] 2020-07-23T18:29:23,669Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:23,697Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[ERROR] 2020-07-23T18:29:25,926Z [main] internal.Verifier. - Error validating transaction 2827EE588C3DCA19D80D9719401BD94667A0475B63365E12D24F874F5CF7C746. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:25,931Z [main] internal.Verifier. - Error validating transaction 2827EE588C3DCA19D80D9719401BD94667A0475B63365E12D24F874F5CF7C746. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:27,102Z [main] internal.Verifier. - Error validating transaction 903B82158893B4BF7DD8F3B97A7122830921C95296DFDAF8A196D6058D324FBB. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$3(ContractTests.java:62) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:58) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:27,108Z [main] internal.Verifier. - Error validating transaction 903B82158893B4BF7DD8F3B97A7122830921C95296DFDAF8A196D6058D324FBB. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$3(ContractTests.java:62) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:58) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:27,137Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:27,137Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[WARN ] 2020-07-23T18:29:27,156Z [main] cordapp.CordappResolver. - The CorDapp (name: Contract: custom-cordapp, Workflow: custom-cordapp, file: custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba) is installed multiple times on the node. The following files correspond to the exact same content: [custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba] {}
[ERROR] 2020-07-23T18:29:28,323Z [main] internal.Verifier. - Error validating transaction 7BD984043988AF91442CDBF47D07E29869BE862A96E3B42D6F02D74136B971B0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:28,328Z [main] internal.Verifier. - Error validating transaction 7BD984043988AF91442CDBF47D07E29869BE862A96E3B42D6F02D74136B971B0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:29,295Z [main] internal.Verifier. - Error validating transaction 4F9B8919D380D98F92FCC43AF1BBBD977603D38FED9352C4318D0B4AC5979D8F. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:29,298Z [main] internal.Verifier. - Error validating transaction 4F9B8919D380D98F92FCC43AF1BBBD977603D38FED9352C4318D0B4AC5979D8F. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:30,357Z [main] internal.Verifier. - Error validating transaction 4B85E785B99A63CAE83FB01733D8FA7C0D8D47DF7F5DCEBE84480B626EF5014A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:30,361Z [main] internal.Verifier. - Error validating transaction 4B85E785B99A63CAE83FB01733D8FA7C0D8D47DF7F5DCEBE84480B626EF5014A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:30,378Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:30,378Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[INFO ] 2020-07-23T18:29:30,458Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:30,458Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[WARN ] 2020-07-23T18:29:30,548Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:30,556Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:31,247Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:31,248Z [main] internal.Verifier. - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-07-23T18:29:31,248Z [main] internal.Verifier. - Error validating transaction 19560877884DD49FA1F1815954BF586755E9C2F133A7860AE020F9C525DF4C3D. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[WARN ] 2020-07-23T18:29:31,252Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-07-23T18:29:31,253Z [main] internal.Verifier. - Error validating transaction 19560877884DD49FA1F1815954BF586755E9C2F133A7860AE020F9C525DF4C3D. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:32,025Z [main] internal.Verifier. - Error validating transaction 147D2311564E8F936A1F9C53A439E5456E6D3BF0CF79E41D676C012C3179D0C6. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$7(ContractTests.java:101) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:97) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:32,030Z [main] internal.Verifier. - Error validating transaction 147D2311564E8F936A1F9C53A439E5456E6D3BF0CF79E41D676C012C3179D0C6. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$7(ContractTests.java:101) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:97) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:32,044Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:32,044Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[ERROR] 2020-07-23T18:29:32,881Z [main] internal.Verifier. - Error validating transaction AF5CFA406252D6F6450AB9F63FF805B4AA28C9E0C8944215D7CE035B11025CF5. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:32,886Z [main] internal.Verifier. - Error validating transaction AF5CFA406252D6F6450AB9F63FF805B4AA28C9E0C8944215D7CE035B11025CF5. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:33,612Z [main] internal.Verifier. - Error validating transaction DD2BC65CF3F01C9ACA2AB7AAC0B3D68B251AFB48373B24307FD754EEEC9277CB. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:33,615Z [main] internal.Verifier. - Error validating transaction DD2BC65CF3F01C9ACA2AB7AAC0B3D68B251AFB48373B24307FD754EEEC9277CB. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:33,628Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:33,629Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[ERROR] 2020-07-23T18:29:34,366Z [main] internal.Verifier. - Error validating transaction 64ADF9D612DBF4243F3B6A8C528A8D267BF81B4DD3077016D698DA2B39341065. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:34,370Z [main] internal.Verifier. - Error validating transaction 64ADF9D612DBF4243F3B6A8C528A8D267BF81B4DD3077016D698DA2B39341065. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:35,120Z [main] internal.Verifier. - Error validating transaction DCC9D5CE15E4D885E39AE830C07CE69345C59D8119983372A01FC1400A44DC29. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$5(ContractTests.java:82) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:78) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:35,124Z [main] internal.Verifier. - Error validating transaction DCC9D5CE15E4D885E39AE830C07CE69345C59D8119983372A01FC1400A44DC29. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$5(ContractTests.java:82) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:78) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:35,141Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:35,141Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[ERROR] 2020-07-23T18:29:36,127Z [main] internal.Verifier. - Error validating transaction 1E9742518D2F5FF09E2C7972C642C79042420FC5B0A8E46C57E6A7078FE0031B. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:36,130Z [main] internal.Verifier. - Error validating transaction 1E9742518D2F5FF09E2C7972C642C79042420FC5B0A8E46C57E6A7078FE0031B. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:36,832Z [main] internal.Verifier. - Error validating transaction EAB9C519A74BDE163B9EE71758DDEEEAC95489DCE9397A0B440442BFC31A1AA5. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:36,836Z [main] internal.Verifier. - Error validating transaction EAB9C519A74BDE163B9EE71758DDEEEAC95489DCE9397A0B440442BFC31A1AA5. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:37,504Z [main] internal.Verifier. - Error validating transaction FD65B7690F0226391E863561398B29C5D5D9F53488AD49AED6048CC660731356. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$10(ContractTests.java:132) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:128) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:37,508Z [main] internal.Verifier. - Error validating transaction FD65B7690F0226391E863561398B29C5D5D9F53488AD49AED6048CC660731356. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$10(ContractTests.java:132) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:128) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:37,522Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:37,522Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182923.291/custom-cordapp_1_5_5628142c-dc48-4de8-9205-e29c65302bba.jar {}
[WARN ] 2020-07-23T18:29:37,591Z [main] contracts.AttachmentConstraint. - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2020-07-23T18:29:38,219Z [main] internal.Verifier. - Error validating transaction A51C2EEBD39F884D35859F3F828A9206AED0474B58F8B82D3297936071F29BDA. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:298) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:336) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:38,326Z [main] internal.Verifier. - Error validating transaction E9C32758F631BE831792D7FF6DCF6CD5867E2706771BF0A59753C147335CD650. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:38,333Z [main] internal.Verifier. - Error validating transaction E9C32758F631BE831792D7FF6DCF6CD5867E2706771BF0A59753C147335CD650. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:39,224Z [main] internal.Verifier. - Error validating transaction 7AA6B0A6E317FA7C0DF05E08957D6AA013CC89AAE3A556F6A4FC956831C51C6D. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$1(ContractTests.java:42) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:38) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:39,227Z [main] internal.Verifier. - Error validating transaction 7AA6B0A6E317FA7C0DF05E08957D6AA013CC89AAE3A556F6A4FC956831C51C6D. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$1(ContractTests.java:42) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:38) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115) ~[junit-4.12.jar:4.12]
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_252]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[?:1.8.0_252]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[?:1.8.0_252]
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[?:1.8.0_252]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_252]
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485) ~[?:1.8.0_252]
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71) ~[junit-vintage-engine-5.5.0-RC1.jar:5.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.5.0-RC1.jar:1.5.0-RC1]
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) ~[junit5-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:47,024Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:47,050Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[ERROR] 2020-07-23T18:29:49,749Z [main] internal.Verifier. - Error validating transaction B753EBE3BB324D1841AC4B0C64FCCB8A3CA31F4E2751C73DF57A18E8FCEBBFB3. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:49,760Z [main] internal.Verifier. - Error validating transaction B753EBE3BB324D1841AC4B0C64FCCB8A3CA31F4E2751C73DF57A18E8FCEBBFB3. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:50,983Z [main] internal.Verifier. - Error validating transaction 2DABA1BA8FBA1202078FB5A0411E4C76B47302BE306862193E5178AFEFFCC1FC. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$3(ContractTests.java:62) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:58) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:50,990Z [main] internal.Verifier. - Error validating transaction 2DABA1BA8FBA1202078FB5A0411E4C76B47302BE306862193E5178AFEFFCC1FC. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$3(ContractTests.java:62) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:58) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:51,022Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:51,022Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[WARN ] 2020-07-23T18:29:51,045Z [main] cordapp.CordappResolver. - The CorDapp (name: Contract: custom-cordapp, Workflow: custom-cordapp, file: custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2) is installed multiple times on the node. The following files correspond to the exact same content: [custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2] {}
[ERROR] 2020-07-23T18:29:52,473Z [main] internal.Verifier. - Error validating transaction A50767C035DAB4A1DEBF19B17FA6FB2BFC59B6DE121C22C76C95E6E362937725. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:52,477Z [main] internal.Verifier. - Error validating transaction A50767C035DAB4A1DEBF19B17FA6FB2BFC59B6DE121C22C76C95E6E362937725. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:53,306Z [main] internal.Verifier. - Error validating transaction DE87BFB7F5BFEB6269724AD520E0A557978F8F6262787EDEC908421410A45508. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:53,309Z [main] internal.Verifier. - Error validating transaction DE87BFB7F5BFEB6269724AD520E0A557978F8F6262787EDEC908421410A45508. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:32) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:54,112Z [main] internal.Verifier. - Error validating transaction D1215331AAF52DE9006AB512C2C4FEEFB3754C6796EE5D1A641B88471A90B9E1. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:54,115Z [main] internal.Verifier. - Error validating transaction D1215331AAF52DE9006AB512C2C4FEEFB3754C6796EE5D1A641B88471A90B9E1. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:54,133Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:54,133Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[INFO ] 2020-07-23T18:29:54,202Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:54,203Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[WARN ] 2020-07-23T18:29:54,307Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:54,317Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:55,004Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:29:55,005Z [main] internal.Verifier. - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-07-23T18:29:55,005Z [main] internal.Verifier. - Error validating transaction B4F448C5FFA88430997E74EAD0AF88D5E7D00C25AC527952FF53E651BD8FCD76. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[WARN ] 2020-07-23T18:29:55,009Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-07-23T18:29:55,009Z [main] internal.Verifier. - Error validating transaction B4F448C5FFA88430997E74EAD0AF88D5E7D00C25AC527952FF53E651BD8FCD76. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:56,027Z [main] internal.Verifier. - Error validating transaction 856659CEA2F5164A9B8E767E48054319192018E6871B6D9A496D58C29B47B430. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$7(ContractTests.java:101) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:97) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:56,031Z [main] internal.Verifier. - Error validating transaction 856659CEA2F5164A9B8E767E48054319192018E6871B6D9A496D58C29B47B430. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$7(ContractTests.java:101) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:97) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:56,044Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:56,045Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[ERROR] 2020-07-23T18:29:56,737Z [main] internal.Verifier. - Error validating transaction 4C70847650A2B5AC72CECA74F5EA006ADB8D540701E3F52C594A73ADEC3CCADD. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:56,741Z [main] internal.Verifier. - Error validating transaction 4C70847650A2B5AC72CECA74F5EA006ADB8D540701E3F52C594A73ADEC3CCADD. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:57,455Z [main] internal.Verifier. - Error validating transaction A4FFF0A7E82182F5D1D04E6AFA3CF3F1E90FDE8AD78C01EA412F72529F21F97A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:57,459Z [main] internal.Verifier. - Error validating transaction A4FFF0A7E82182F5D1D04E6AFA3CF3F1E90FDE8AD78C01EA412F72529F21F97A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:57,472Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:57,472Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[ERROR] 2020-07-23T18:29:58,280Z [main] internal.Verifier. - Error validating transaction 0607063E2BA58D006371AC40E49EB3BBA7E0483F8F6707F7DF52F28DB140CCFA. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:58,284Z [main] internal.Verifier. - Error validating transaction 0607063E2BA58D006371AC40E49EB3BBA7E0483F8F6707F7DF52F28DB140CCFA. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:58,994Z [main] internal.Verifier. - Error validating transaction 5298DD1956C69E42CDC87BA6340869894C5B01DDEF37DBECA9049F2F25883B16. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$5(ContractTests.java:82) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:78) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:58,997Z [main] internal.Verifier. - Error validating transaction 5298DD1956C69E42CDC87BA6340869894C5B01DDEF37DBECA9049F2F25883B16. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$5(ContractTests.java:82) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:78) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:29:59,011Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:29:59,012Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[ERROR] 2020-07-23T18:29:59,812Z [main] internal.Verifier. - Error validating transaction 2CB1E08CC4BAD750184AF41FBDA5578329EFE7D3ED397AC74491AD91F9650DD0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:29:59,816Z [main] internal.Verifier. - Error validating transaction 2CB1E08CC4BAD750184AF41FBDA5578329EFE7D3ED397AC74491AD91F9650DD0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:00,571Z [main] internal.Verifier. - Error validating transaction 5AD0FC76D7444867F1EC6AC9A26F9E7F3A0B878C04E9903317646BF406F3C206. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:00,575Z [main] internal.Verifier. - Error validating transaction 5AD0FC76D7444867F1EC6AC9A26F9E7F3A0B878C04E9903317646BF406F3C206. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:01,553Z [main] internal.Verifier. - Error validating transaction C252BEAEC83A4CD822C5C577C847B3F427B45A3C56FE613FD2F831DE5E3E0615. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$10(ContractTests.java:132) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:128) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:01,557Z [main] internal.Verifier. - Error validating transaction C252BEAEC83A4CD822C5C577C847B3F427B45A3C56FE613FD2F831DE5E3E0615. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$10(ContractTests.java:132) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:128) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:30:01,570Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:30:01,570Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-182946.623/custom-cordapp_1_5_cbc6c802-38de-45ad-ba97-baba6a973cf2.jar {}
[WARN ] 2020-07-23T18:30:01,641Z [main] contracts.AttachmentConstraint. - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2020-07-23T18:30:02,262Z [main] internal.Verifier. - Error validating transaction 9BFDADDB210DD71861F85F0BD421027E106200195A69255D8506984001050C97. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:298) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:336) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:02,348Z [main] internal.Verifier. - Error validating transaction 6076C0D96CA89DD901F136DB5158C5A7B07F67D504D44F1BD6427D457F30B57C. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:02,354Z [main] internal.Verifier. - Error validating transaction 6076C0D96CA89DD901F136DB5158C5A7B07F67D504D44F1BD6427D457F30B57C. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:03,128Z [main] internal.Verifier. - Error validating transaction 15A397716760B7A070C8E22EE257EE6757673E47D83A8C772D262040B2232298. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$1(ContractTests.java:42) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:38) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:30:03,131Z [main] internal.Verifier. - Error validating transaction 15A397716760B7A070C8E22EE257EE6757673E47D83A8C772D262040B2232298. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$1(ContractTests.java:42) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:38) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:41:38,835Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in /home/eamonn/723bootcamp ... {}
[INFO ] 2020-07-23T18:41:39,052Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:41:40,486Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:41:41,269Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-23T18:41:41,284Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:41:41,285Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:41:41,782Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:41:41,802Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-23T18:41:42,214Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:41:42,224Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:41:42,225Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-23T18:41:42,386Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:41:42,396Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:41:42,959Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-23T18:41:43,207Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:41:43,217Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:41:43,248Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:41:43,248Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:41:43,248Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:41:43,967Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:41:43,967Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:41:44,068Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:44,109Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:41:44,149Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-07-23T18:41:44,290Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:41:44,290Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-07-23T18:41:44,321Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:41:44,361Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-07-23T18:41:44,361Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:41:44,399Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:44,399Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-07-23T18:41:44,409Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:44,409Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-07-23T18:41:44,409Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:44,409Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,430Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-07-23T18:41:44,480Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,480Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,490Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,490Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,491Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,491Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,491Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,491Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:44,501Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-07-23T18:41:46,082Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:41:46,082Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:41:46,082Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project '723bootcamp' {}
[INFO ] 2020-07-23T18:41:46,082Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:41:46,084Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:41:46,093Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in /home/eamonn/723bootcamp/.gradle {}
[INFO ] 2020-07-23T18:41:46,093Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:41:46,117Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-23T18:41:46,285Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184133.182/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:41:46,290Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:41:46,312Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:41:47,134Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:41:47,221Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:47,222Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:47,384Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:41:33.127Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:41:51,941Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:51,949Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184133.182/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:51,949Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:52,004Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:52,103Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:52,110Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,258Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,826Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,829Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,832Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,833Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,924Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:54,978Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:41:55,007Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:41:55,007Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:41:55,296Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:41:55,305Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:41:55,305Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:55,311Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:41:55,491Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:55,546Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:41:55,565Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:55,593Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:55,640Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:41:55,645Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:41:55,649Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:41:56,110Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:56,131Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:56,132Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:56,134Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:56,134Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:56,139Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184133.182/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:41:56,140Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:41:56,140Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/1/cordapps/723bootcamp.jar {}
[WARN ] 2020-07-23T18:41:56,159Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: 723bootcamp) is installed multiple times on the node. The following files correspond to the exact same content: [723bootcamp] {}
[INFO ] 2020-07-23T18:41:56,185Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:41:56,214Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:56,214Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:56,218Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:41:33.127Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:41:56,806Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,809Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184133.182/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,809Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,828Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,831Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,831Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,976Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,991Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,993Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,996Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:56,996Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:57,093Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:57,101Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:41:57,104Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:57,104Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:57,266Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:57,267Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:41:57,291Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:41:57,291Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,294Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:57,306Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,316Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:41:57,320Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,326Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:57,405Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:41:57,418Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,422Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:57,424Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:41:57,439Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,441Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:57,453Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,453Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:57,453Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:57,453Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:57,457Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184133.182/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:41:57,457Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:41:57,457Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184133.182/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:41:57,501Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:41:57,525Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:57,525Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:41:57,529Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:41:33.127Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:41:58,028Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,032Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184133.182/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,032Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,050Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,053Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,053Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,237Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,255Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,256Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,259Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,259Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,321Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:41:58,328Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:41:58,329Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:58,329Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:58,441Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:41:58,442Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:41:58,467Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:41:58,467Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,469Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:58,478Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,486Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:41:58,489Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,495Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:58,531Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:41:58,540Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,544Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529715305) {}
[INFO ] 2020-07-23T18:41:58,545Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:41:58,556Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,557Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:58,570Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529717291) {}
[INFO ] 2020-07-23T18:41:58,572Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:58,581Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,582Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:41:58,591Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,591Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:41:58,591Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529718467) {}
[INFO ] 2020-07-23T18:41:58,592Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-23T18:41:59,281Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[WARN ] 2020-07-23T18:41:59,281Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[ERROR] 2020-07-23T18:42:00,904Z [Mock network] internal.Verifier. - Error validating transaction DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:00,912Z [Mock network] internal.Verifier. - Error validating transaction DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:00,912Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[INFO ] 2020-07-23T18:42:00,923Z [Mock network] statemachine.StaffedFlowHospital. - Flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Invocation, sessionId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D7A3B4E374F7517FF9AE3E12CDD0C941AD8D0E130FB63BDD7C0220DA23F947FD), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@bec6b59, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3b60e215-6939-479d-a478-e0fb20a7910a) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[INFO ] 2020-07-23T18:42:00,927Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:00,930Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:00,954Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] errored, dumping all transitions:

 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:41:58.810Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Invocation, sessionId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D7A3B4E374F7517FF9AE3E12CDD0C941AD8D0E130FB63BDD7C0220DA23F947FD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5])
    SignalFlowHasStarted(flowId=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5]
    []


 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.933Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6152037501854163838, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)], propagatedIndex=0, propagating=false)


 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.939Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.943Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[WARN ] 2020-07-23T18:42:00,955Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:00,958Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:01,014Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] errored, dumping all transitions:

 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:41:58.810Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Invocation, sessionId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D7A3B4E374F7517FF9AE3E12CDD0C941AD8D0E130FB63BDD7C0220DA23F947FD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5])
    SignalFlowHasStarted(flowId=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4dd985c5]
    []


 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.933Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6152037501854163838, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)], propagatedIndex=0, propagating=false)


 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.939Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:00.943Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] ---
  Timestamp: 2020-07-23T18:42:01.008Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE, errorId=-6152037501854163838)], sessions=[], senderUUID=3b60e215-6939-479d-a478-e0fb20a7910a)
    CreateTransaction
    RemoveCheckpoint(id=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=794a377c-a499-4fbc-a4f5-0b8ecb7608c2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[794a377c-a499-4fbc-a4f5-0b8ecb7608c2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6152037501854163838, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Invocation, sessionId=1474f768-f911-4542-8d83-664adee2a07c, timestamp: 2020-07-23T18:41:58.641Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D7A3B4E374F7517FF9AE3E12CDD0C941AD8D0E130FB63BDD7C0220DA23F947FD), errorState=Errored(errors=[FlowError(errorId=-6152037501854163838, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@bec6b59, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3b60e215-6939-479d-a478-e0fb20a7910a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
[WARN ] 2020-07-23T18:42:01,014Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [794a377c-a499-4fbc-a4f5-0b8ecb7608c2] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=794a377c-a499-4fbc-a4f5-0b8ecb7608c2, invocation_id=1474f768-f911-4542-8d83-664adee2a07c, invocation_timestamp=2020-07-23T18:41:58.641Z, origin=Only For Testing, session_id=1474f768-f911-4542-8d83-664adee2a07c, session_timestamp=2020-07-23T18:41:58.641Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DC416D47260510B803696209B805D39119B6FA4B9977D0F997DF9B15A720FAFE
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:01,209Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184201.091/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:42:01,212Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:01,213Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:01,289Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:01,296Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:01,296Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:01,311Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:01.091Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:01,947Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:01,950Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184201.091/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:01,950Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:01,966Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:01,969Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:01,969Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,076Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,089Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,090Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,093Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,093Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,201Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:02,246Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:02,254Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:02,254Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:02,410Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:02,416Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:02,416Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,419Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:02,441Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,454Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:02,458Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,464Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:02,515Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:02,517Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:42:02,517Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:42:02,526Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,529Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,529Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:02,529Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:02,529Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:02,535Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184201.091/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:42:02,535Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:02,535Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:02,567Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:02,592Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:02,592Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:02,596Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:01.091Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:03,126Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,129Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184201.091/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,129Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,155Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,158Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,158Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,276Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,288Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,289Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,292Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,292Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,389Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:03,395Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:03,396Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:03,396Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:03,538Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:03,539Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:03,566Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:03,566Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,568Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:03,574Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,583Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:03,586Z [MockNode-5-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,592Z [MockNode-5-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:03,639Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:03,647Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,650Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:03,652Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:03,664Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,665Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:03,677Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,677Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:03,678Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:03,678Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:03,682Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184201.091/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:42:03,683Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:03,683Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184201.091/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:03,730Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:03,756Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:03,756Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:03,760Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:01.091Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:04,232Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,234Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184201.091/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,234Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,258Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,262Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,262Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,367Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,379Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,380Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,382Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,383Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,471Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:04,478Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:04,480Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:04,480Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:04,597Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:04,598Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:04,620Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:04,620Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,622Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:04,629Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,636Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:04,639Z [MockNode-6-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,646Z [MockNode-6-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:04,688Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:04,698Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,705Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529722416) {}
[INFO ] 2020-07-23T18:42:04,707Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:04,718Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,719Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:04,728Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529723566) {}
[INFO ] 2020-07-23T18:42:04,729Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:04,740Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,741Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:04,751Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,751Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:04,751Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529724620) {}
[INFO ] 2020-07-23T18:42:04,751Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:42:06,224Z [Mock network] internal.Verifier. - Error validating transaction 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:06,229Z [Mock network] internal.Verifier. - Error validating transaction 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:06,229Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
[INFO ] 2020-07-23T18:42:06,231Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Invocation, sessionId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDCF3931CD3C5FBFB16178B92C997A725DD56B71D9C260A147CBAA5130C5AE41), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@43145f8b, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a5bbf3a7-f068-4319-9198-b986484c4ed9) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
[INFO ] 2020-07-23T18:42:06,231Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:06,231Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:06,234Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] errored, dumping all transitions:

 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:04.759Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Invocation, sessionId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDCF3931CD3C5FBFB16178B92C997A725DD56B71D9C260A147CBAA5130C5AE41), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d])
    SignalFlowHasStarted(flowId=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d]
    []


 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.231Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6498092754244992822, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.231Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.232Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
[WARN ] 2020-07-23T18:42:06,234Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:06,235Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:06,245Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] errored, dumping all transitions:

 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:04.759Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Invocation, sessionId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDCF3931CD3C5FBFB16178B92C997A725DD56B71D9C260A147CBAA5130C5AE41), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d])
    SignalFlowHasStarted(flowId=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@39510f7d]
    []


 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.231Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6498092754244992822, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.231Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.232Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] ---
  Timestamp: 2020-07-23T18:42:06.243Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258, errorId=6498092754244992822)], sessions=[], senderUUID=a5bbf3a7-f068-4319-9198-b986484c4ed9)
    CreateTransaction
    RemoveCheckpoint(id=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6498092754244992822, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Invocation, sessionId=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, timestamp: 2020-07-23T18:42:04.755Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDCF3931CD3C5FBFB16178B92C997A725DD56B71D9C260A147CBAA5130C5AE41), errorState=Errored(errors=[FlowError(errorId=6498092754244992822, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@43145f8b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a5bbf3a7-f068-4319-9198-b986484c4ed9))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
[WARN ] 2020-07-23T18:42:06,245Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=ce46f1cc-7ea6-4e1f-bb9e-55fa665fb7d7, invocation_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, invocation_timestamp=2020-07-23T18:42:04.755Z, origin=Only For Testing, session_id=9dad64cf-eaf5-45e2-90ad-5846aacdcd98, session_timestamp=2020-07-23T18:42:04.755Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 15CBBF46C472DBBB1CA37BF064F4603C4ABC450DD993294FB528771DA0FE4258
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:06,404Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184206.304/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:42:06,404Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:06,404Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:06,453Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:06,460Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:06,460Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:06,473Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:06.304Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:06,964Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:06,966Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184206.304/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:06,966Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:06,980Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:06,982Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:06,983Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,071Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,090Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,091Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,095Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,095Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,165Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,189Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:07,212Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:07,212Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:07,362Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:07,367Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:07,367Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,369Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:07,388Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,401Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:07,404Z [MockNode-7-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,411Z [MockNode-7-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:07,449Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:07,451Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:42:07,451Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:42:07,460Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,465Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,465Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:07,465Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:07,465Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:07,469Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184206.304/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:42:07,469Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:07,469Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:07,505Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:07,524Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:07,524Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:07,528Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:06.304Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:07,925Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,927Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184206.304/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,927Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,939Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,941Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:07,942Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,071Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,082Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,083Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,085Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,085Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,138Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,143Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:08,144Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:08,144Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:08,254Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:08,255Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:08,278Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:08,278Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,281Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:08,286Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,292Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:08,296Z [MockNode-8-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,302Z [MockNode-8-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:08,341Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:08,351Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,354Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:08,356Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:08,365Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,366Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:08,375Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,375Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:08,376Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:08,376Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:08,380Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184206.304/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:42:08,380Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:08,380Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184206.304/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:08,411Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:08,436Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:08,436Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:08,439Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:06.304Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:08,826Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,828Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184206.304/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,828Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,848Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,850Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,850Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,953Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,965Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,966Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,972Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:08,972Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:09,054Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:09,059Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:09,061Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:09,061Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:09,162Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:09,163Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:09,187Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:09,187Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,189Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:09,196Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,203Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:09,206Z [MockNode-9-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,212Z [MockNode-9-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:09,243Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:09,252Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,255Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529727367) {}
[INFO ] 2020-07-23T18:42:09,256Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:09,266Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,268Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:09,278Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529728278) {}
[INFO ] 2020-07-23T18:42:09,279Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:09,289Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,290Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:09,300Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,300Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:09,301Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529729187) {}
[INFO ] 2020-07-23T18:42:09,301Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:42:10,696Z [Mock network] internal.Verifier. - Error validating transaction ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:10,700Z [Mock network] internal.Verifier. - Error validating transaction ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:10,700Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
[INFO ] 2020-07-23T18:42:10,701Z [Mock network] statemachine.StaffedFlowHospital. - Flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Invocation, sessionId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E2FC10EC8EEB550F927FF781FE76C7C68AAA851FFBA715FA007B37AEA043B336), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@51220e54, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e14eeb0a-9664-46c4-8d02-fc754946ea0a) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
[INFO ] 2020-07-23T18:42:10,701Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:10,702Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:10,704Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] errored, dumping all transitions:

 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:09.306Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9644bef1-e3e1-4697-a971-7f11cb7eddfd], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Invocation, sessionId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E2FC10EC8EEB550F927FF781FE76C7C68AAA851FFBA715FA007B37AEA043B336), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638])
    SignalFlowHasStarted(flowId=[9644bef1-e3e1-4697-a971-7f11cb7eddfd])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638]
    []


 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5863936652556186435, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
[WARN ] 2020-07-23T18:42:10,704Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:10,705Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:10,715Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] errored, dumping all transitions:

 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:09.306Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9644bef1-e3e1-4697-a971-7f11cb7eddfd], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Invocation, sessionId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E2FC10EC8EEB550F927FF781FE76C7C68AAA851FFBA715FA007B37AEA043B336), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638])
    SignalFlowHasStarted(flowId=[9644bef1-e3e1-4697-a971-7f11cb7eddfd])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4ee7c638]
    []


 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5863936652556186435, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)], propagatedIndex=0, propagating=false)


 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.702Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] ---
  Timestamp: 2020-07-23T18:42:10.713Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877, errorId=-5863936652556186435)], sessions=[], senderUUID=e14eeb0a-9664-46c4-8d02-fc754946ea0a)
    CreateTransaction
    RemoveCheckpoint(id=[9644bef1-e3e1-4697-a971-7f11cb7eddfd])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=9644bef1-e3e1-4697-a971-7f11cb7eddfd)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[9644bef1-e3e1-4697-a971-7f11cb7eddfd], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5863936652556186435, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Invocation, sessionId=86282041-b7ee-47f9-bb33-fcf15721e833, timestamp: 2020-07-23T18:42:09.302Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E2FC10EC8EEB550F927FF781FE76C7C68AAA851FFBA715FA007B37AEA043B336), errorState=Errored(errors=[FlowError(errorId=-5863936652556186435, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@51220e54, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e14eeb0a-9664-46c4-8d02-fc754946ea0a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
[WARN ] 2020-07-23T18:42:10,715Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [9644bef1-e3e1-4697-a971-7f11cb7eddfd] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=9644bef1-e3e1-4697-a971-7f11cb7eddfd, invocation_id=86282041-b7ee-47f9-bb33-fcf15721e833, invocation_timestamp=2020-07-23T18:42:09.302Z, origin=Only For Testing, session_id=86282041-b7ee-47f9-bb33-fcf15721e833, session_timestamp=2020-07-23T18:42:09.302Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: ED61D14D9329402A9141890A6BD079E9E6E650E5479F54FDD3F7D4C93791F877
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:10,792Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184210.728/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:42:10,793Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:10,793Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:10,826Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:10,829Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:10,830Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:10,837Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:10.728Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:11,225Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,227Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184210.728/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,227Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,238Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,240Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,240Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,338Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,347Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,348Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,350Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,350Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,403Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:11,422Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:11,430Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:11,430Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:11,534Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:11,539Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:11,539Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,541Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:11,559Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,571Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:11,575Z [MockNode-10-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,583Z [MockNode-10-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:11,618Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:11,619Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:42:11,620Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:42:11,626Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,629Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,629Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:11,629Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:11,629Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:11,633Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184210.728/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:42:11,633Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:11,633Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:11,667Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:11,687Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:11,687Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:11,689Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:10.728Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:12,045Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,047Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184210.728/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,047Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,058Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,060Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,060Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,133Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,154Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,155Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,157Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,157Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,212Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,217Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:12,218Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:12,218Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:12,316Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:12,317Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:12,333Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:12,333Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,335Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:12,341Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,347Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:12,351Z [MockNode-11-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,358Z [MockNode-11-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:12,394Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:12,401Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,402Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:12,403Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:12,410Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,412Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:12,421Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,421Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:12,421Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:12,421Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:12,425Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184210.728/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:42:12,425Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:12,425Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184210.728/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:12,458Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:12,479Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:12,479Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:12,482Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:10.728Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:12,820Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,822Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184210.728/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,822Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,833Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,835Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,835Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,914Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,923Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,924Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,925Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,925Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,980Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:12,984Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:12,985Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:12,985Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:13,063Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:13,065Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:13,090Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:13,090Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,092Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:13,113Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,119Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:13,122Z [MockNode-12-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,126Z [MockNode-12-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:13,157Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:13,166Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,168Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529731539) {}
[INFO ] 2020-07-23T18:42:13,169Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:13,178Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,179Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:13,187Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529732333) {}
[INFO ] 2020-07-23T18:42:13,188Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:13,197Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,198Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:13,206Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,206Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:13,206Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529733090) {}
[INFO ] 2020-07-23T18:42:13,206Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:42:14,330Z [Mock network] internal.Verifier. - Error validating transaction 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:14,334Z [Mock network] internal.Verifier. - Error validating transaction 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:14,334Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
[INFO ] 2020-07-23T18:42:14,335Z [Mock network] statemachine.StaffedFlowHospital. - Flow [bbe60907-26f8-48e0-93df-fc268f88b49d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Invocation, sessionId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BD8E8B6BA6E4CE22530F258874CD91968ECCC4D85D8388F0D7F898BEDC3DA50C), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@49cd9c22, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=2bd1c2a7-eb2b-4e0d-90e1-381d8dfb0573) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
[INFO ] 2020-07-23T18:42:14,335Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:14,336Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:14,337Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bbe60907-26f8-48e0-93df-fc268f88b49d] errored, dumping all transitions:

 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:13.210Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bbe60907-26f8-48e0-93df-fc268f88b49d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Invocation, sessionId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BD8E8B6BA6E4CE22530F258874CD91968ECCC4D85D8388F0D7F898BEDC3DA50C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c])
    SignalFlowHasStarted(flowId=[bbe60907-26f8-48e0-93df-fc268f88b49d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c]
    []


 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6959578624674212893, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)], propagatedIndex=0, propagating=false)


 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
[WARN ] 2020-07-23T18:42:14,337Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bbe60907-26f8-48e0-93df-fc268f88b49d] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:14,339Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:14,354Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bbe60907-26f8-48e0-93df-fc268f88b49d] errored, dumping all transitions:

 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:13.210Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bbe60907-26f8-48e0-93df-fc268f88b49d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Invocation, sessionId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BD8E8B6BA6E4CE22530F258874CD91968ECCC4D85D8388F0D7F898BEDC3DA50C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c])
    SignalFlowHasStarted(flowId=[bbe60907-26f8-48e0-93df-fc268f88b49d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@24db5f1c]
    []


 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6959578624674212893, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)], propagatedIndex=0, propagating=false)


 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.336Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [bbe60907-26f8-48e0-93df-fc268f88b49d] ---
  Timestamp: 2020-07-23T18:42:14.352Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253, errorId=6959578624674212893)], sessions=[], senderUUID=2bd1c2a7-eb2b-4e0d-90e1-381d8dfb0573)
    CreateTransaction
    RemoveCheckpoint(id=[bbe60907-26f8-48e0-93df-fc268f88b49d])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=bbe60907-26f8-48e0-93df-fc268f88b49d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[bbe60907-26f8-48e0-93df-fc268f88b49d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6959578624674212893, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Invocation, sessionId=51740b47-a0b8-49bf-8616-5c63a94e0cef, timestamp: 2020-07-23T18:42:13.207Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BD8E8B6BA6E4CE22530F258874CD91968ECCC4D85D8388F0D7F898BEDC3DA50C), errorState=Errored(errors=[FlowError(errorId=6959578624674212893, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@49cd9c22, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=2bd1c2a7-eb2b-4e0d-90e1-381d8dfb0573))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
[WARN ] 2020-07-23T18:42:14,354Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bbe60907-26f8-48e0-93df-fc268f88b49d] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=bbe60907-26f8-48e0-93df-fc268f88b49d, invocation_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, invocation_timestamp=2020-07-23T18:42:13.207Z, origin=Only For Testing, session_id=51740b47-a0b8-49bf-8616-5c63a94e0cef, session_timestamp=2020-07-23T18:42:13.207Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 953023BB68C5AD86A51665D2E8F512F9EC244681A9EFBFB4B3C3930990AFC253
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:14,429Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184214.375/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:42:14,430Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:14,430Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:14,469Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:14,472Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:14,473Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:14,479Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:14.375Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:14,845Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,846Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184214.375/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,846Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,865Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,867Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,867Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,942Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,951Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,952Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,954Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:14,954Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,009Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,032Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:15,041Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:15,041Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:15,134Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:15,138Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:15,138Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,140Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:15,154Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,163Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:15,167Z [MockNode-13-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,171Z [MockNode-13-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,220Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:15,222Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:42:15,222Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:42:15,229Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,232Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,232Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,232Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,232Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,236Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184214.375/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:42:15,236Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:15,236Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:15,263Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:15,288Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:15,288Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:15,291Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:14.375Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:15,608Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,610Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184214.375/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,610Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,619Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,621Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,621Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,688Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,697Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,698Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,699Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,700Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,749Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:15,753Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:15,754Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:15,754Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:15,840Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:15,841Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:15,857Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:15,857Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,858Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:15,872Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,877Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:15,884Z [MockNode-14-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,892Z [MockNode-14-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,927Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:15,934Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,936Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:15,937Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:15,945Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,947Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:15,953Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,954Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,954Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:15,954Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:15,957Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184214.375/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:42:15,958Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:15,958Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184214.375/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:15,992Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:16,015Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:16,015Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:16,018Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:14.375Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:16,341Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,342Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184214.375/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,342Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,353Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,355Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,355Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,444Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,453Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,454Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,455Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,455Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,507Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:16,512Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:16,512Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:16,513Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:16,590Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:16,590Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:16,605Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:16,605Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,607Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:16,611Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,616Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:16,619Z [MockNode-15-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,622Z [MockNode-15-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:16,658Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:16,664Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,666Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529735138) {}
[INFO ] 2020-07-23T18:42:16,667Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:16,674Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,675Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:16,683Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529735857) {}
[INFO ] 2020-07-23T18:42:16,684Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:16,691Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,692Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:16,700Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,700Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:16,700Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529736605) {}
[INFO ] 2020-07-23T18:42:16,700Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:42:17,852Z [Mock network] internal.Verifier. - Error validating transaction 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:17,854Z [Mock network] internal.Verifier. - Error validating transaction 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:17,854Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
[INFO ] 2020-07-23T18:42:17,855Z [Mock network] statemachine.StaffedFlowHospital. - Flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Invocation, sessionId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=12131CC7A943232640F1A3EC6FD30F59B3B5CBC7913B8D0F87221873888F486F), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6812931e, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b07cb9f1-574e-4e43-bc3b-46e4f5c8ec31) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
[INFO ] 2020-07-23T18:42:17,855Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:17,856Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:17,857Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] errored, dumping all transitions:

 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:16.706Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3f9674b8-6f8f-4af2-b404-2e3f372920d5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Invocation, sessionId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=12131CC7A943232640F1A3EC6FD30F59B3B5CBC7913B8D0F87221873888F486F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50])
    SignalFlowHasStarted(flowId=[3f9674b8-6f8f-4af2-b404-2e3f372920d5])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50]
    []


 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3119180913732637895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)], propagatedIndex=0, propagating=false)


 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
[WARN ] 2020-07-23T18:42:17,857Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:17,857Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:17,864Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] errored, dumping all transitions:

 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:16.706Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3f9674b8-6f8f-4af2-b404-2e3f372920d5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Invocation, sessionId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=12131CC7A943232640F1A3EC6FD30F59B3B5CBC7913B8D0F87221873888F486F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50])
    SignalFlowHasStarted(flowId=[3f9674b8-6f8f-4af2-b404-2e3f372920d5])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3cd0de50]
    []


 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3119180913732637895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)], propagatedIndex=0, propagating=false)


 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.856Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] ---
  Timestamp: 2020-07-23T18:42:17.864Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E, errorId=3119180913732637895)], sessions=[], senderUUID=b07cb9f1-574e-4e43-bc3b-46e4f5c8ec31)
    CreateTransaction
    RemoveCheckpoint(id=[3f9674b8-6f8f-4af2-b404-2e3f372920d5])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=3f9674b8-6f8f-4af2-b404-2e3f372920d5)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[3f9674b8-6f8f-4af2-b404-2e3f372920d5], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3119180913732637895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Invocation, sessionId=c07fb09b-5db0-4971-bab3-c038d57d3e89, timestamp: 2020-07-23T18:42:16.702Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=12131CC7A943232640F1A3EC6FD30F59B3B5CBC7913B8D0F87221873888F486F), errorState=Errored(errors=[FlowError(errorId=3119180913732637895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6812931e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b07cb9f1-574e-4e43-bc3b-46e4f5c8ec31))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
[WARN ] 2020-07-23T18:42:17,865Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [3f9674b8-6f8f-4af2-b404-2e3f372920d5] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=3f9674b8-6f8f-4af2-b404-2e3f372920d5, invocation_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, invocation_timestamp=2020-07-23T18:42:16.702Z, origin=Only For Testing, session_id=c07fb09b-5db0-4971-bab3-c038d57d3e89, session_timestamp=2020-07-23T18:42:16.702Z, thread-id=683}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 856F1D7673B3B2DC738A5FEABE233B311B366D413C5C7E04D275D38AB09B652E
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:17,928Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184217.874/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:42:17,929Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:17,929Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:17,953Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:17,955Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:17,955Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:17,959Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:17.874Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:18,348Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,350Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184217.874/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,350Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,362Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,364Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,364Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,443Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,451Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,452Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,454Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,454Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,505Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:18,525Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:18,535Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:18,535Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:18,633Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:42:18,638Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:18,638Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,639Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:18,654Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,663Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:18,667Z [MockNode-16-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,671Z [MockNode-16-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:18,702Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:18,704Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:42:18,704Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:42:18,709Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,713Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,714Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:18,715Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:18,715Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:18,718Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184217.874/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:42:18,718Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:18,718Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:18,742Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:18,768Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:18,768Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:18,771Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:17.874Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:19,101Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,102Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184217.874/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,102Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,119Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,121Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,121Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,187Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,196Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,197Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,198Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,198Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,241Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,245Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:19,246Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:19,246Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:19,332Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:19,333Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:19,354Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:19,354Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,355Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:19,360Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,365Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:19,368Z [MockNode-17-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,371Z [MockNode-17-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:19,396Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:19,400Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,402Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:19,403Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:19,411Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,412Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:19,419Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,419Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:19,420Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:19,420Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:19,423Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184217.874/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:42:19,423Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:42:19,423Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184217.874/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:42:19,442Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:42:19,464Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:19,464Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:42:19,467Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:42:17.874Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:42:19,786Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,787Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184217.874/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,787Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,797Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,799Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,799Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,862Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,869Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,870Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,872Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,872Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,925Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:42:19,929Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:42:19,929Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:19,929Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:20,021Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:42:20,022Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:42:20,036Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:42:20,037Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,038Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:20,043Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,047Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:42:20,050Z [MockNode-18-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,053Z [MockNode-18-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:20,087Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:42:20,094Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,098Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529738638) {}
[INFO ] 2020-07-23T18:42:20,099Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:42:20,108Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,109Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:20,116Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529739354) {}
[INFO ] 2020-07-23T18:42:20,117Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:20,124Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,124Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:42:20,132Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,132Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:42:20,132Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529740036) {}
[INFO ] 2020-07-23T18:42:20,133Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:42:21,291Z [Mock network] internal.Verifier. - Error validating transaction DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:42:21,294Z [Mock network] internal.Verifier. - Error validating transaction DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:42:21,294Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
[INFO ] 2020-07-23T18:42:21,295Z [Mock network] statemachine.StaffedFlowHospital. - Flow [376f5c5d-32f7-43b0-a495-8122f98e4520] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Invocation, sessionId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4728E4FA2B3300C7D8F9344256694FB5F48D63469B82EC90B9421E7C0EEC24A5), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7a5e70f7, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0b16ed76-91a6-4464-9fe7-d67925dd1095) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
[INFO ] 2020-07-23T18:42:21,295Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:42:21,295Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:21,296Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [376f5c5d-32f7-43b0-a495-8122f98e4520] errored, dumping all transitions:

 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:20.139Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[376f5c5d-32f7-43b0-a495-8122f98e4520], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Invocation, sessionId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4728E4FA2B3300C7D8F9344256694FB5F48D63469B82EC90B9421E7C0EEC24A5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb])
    SignalFlowHasStarted(flowId=[376f5c5d-32f7-43b0-a495-8122f98e4520])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb]
    []


 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=798142572596772168, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)], propagatedIndex=0, propagating=false)


 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
[WARN ] 2020-07-23T18:42:21,296Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [376f5c5d-32f7-43b0-a495-8122f98e4520] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:21,296Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:42:21,302Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [376f5c5d-32f7-43b0-a495-8122f98e4520] errored, dumping all transitions:

 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:20.139Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[376f5c5d-32f7-43b0-a495-8122f98e4520], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Invocation, sessionId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4728E4FA2B3300C7D8F9344256694FB5F48D63469B82EC90B9421E7C0EEC24A5), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb])
    SignalFlowHasStarted(flowId=[376f5c5d-32f7-43b0-a495-8122f98e4520])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4f904adb]
    []


 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=798142572596772168, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)], propagatedIndex=0, propagating=false)


 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.295Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [376f5c5d-32f7-43b0-a495-8122f98e4520] ---
  Timestamp: 2020-07-23T18:42:21.301Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340, errorId=798142572596772168)], sessions=[], senderUUID=0b16ed76-91a6-4464-9fe7-d67925dd1095)
    CreateTransaction
    RemoveCheckpoint(id=[376f5c5d-32f7-43b0-a495-8122f98e4520])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=376f5c5d-32f7-43b0-a495-8122f98e4520)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[376f5c5d-32f7-43b0-a495-8122f98e4520], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=798142572596772168, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Invocation, sessionId=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, timestamp: 2020-07-23T18:42:20.133Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4728E4FA2B3300C7D8F9344256694FB5F48D63469B82EC90B9421E7C0EEC24A5), errorState=Errored(errors=[FlowError(errorId=798142572596772168, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7a5e70f7, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0b16ed76-91a6-4464-9fe7-d67925dd1095))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
[WARN ] 2020-07-23T18:42:21,302Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [376f5c5d-32f7-43b0-a495-8122f98e4520] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=376f5c5d-32f7-43b0-a495-8122f98e4520, invocation_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, invocation_timestamp=2020-07-23T18:42:20.133Z, origin=Only For Testing, session_id=4a5787d3-92e4-4c6d-9f27-cafeb2b594fc, session_timestamp=2020-07-23T18:42:20.133Z, thread-id=814}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: DB79554CE71A6F990257A85A05CE291841364D6803C533B8366880D5E0AE8340
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:43:57,484Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in /home/eamonn/723bootcamp ... {}
[INFO ] 2020-07-23T18:43:57,725Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:43:59,279Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:44:00,005Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-23T18:44:00,022Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:44:00,023Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:44:00,547Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:44:00,567Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-23T18:44:00,980Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:44:00,990Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:44:00,990Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-23T18:44:01,141Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:44:01,152Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:44:01,770Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-23T18:44:02,014Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:44:02,024Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:44:02,055Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:44:02,055Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:44:02,055Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:44:02,765Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:44:02,765Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:44:02,866Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:02,896Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:44:02,937Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-07-23T18:44:03,041Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:44:03,041Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-07-23T18:44:03,072Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:44:03,113Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-07-23T18:44:03,113Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:44:03,143Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:03,143Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-07-23T18:44:03,144Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:03,144Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-07-23T18:44:03,144Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:03,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,175Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-07-23T18:44:03,226Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,226Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,236Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,246Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:44:03,247Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:44:03,257Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:03,257Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-07-23T18:44:03,267Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:44:03,267Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:44:03,267Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project '723bootcamp' {}
[INFO ] 2020-07-23T18:44:03,267Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:44:03,280Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:44:03,280Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in /home/eamonn/723bootcamp/.gradle {}
[INFO ] 2020-07-23T18:44:03,280Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:44:03,331Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-23T18:44:03,591Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184351.988/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:03,597Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:03,619Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:04,524Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:04,619Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:04,620Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:04,800Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:43:51.921Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:09,032Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:09,036Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184351.988/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:09,036Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:09,076Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:09,162Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:09,170Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,181Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,785Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,788Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,792Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,792Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,892Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:11,937Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:11,962Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:11,962Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:12,203Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:12,212Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:12,212Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:12,218Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:12,364Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:12,424Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:12,441Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:12,473Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:12,522Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:12,527Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:12,530Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:13,003Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:13,025Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:13,026Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:13,027Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:13,027Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:13,035Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184351.988/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:13,035Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:13,035Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/1/cordapps/723bootcamp.jar {}
[WARN ] 2020-07-23T18:44:13,051Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: 723bootcamp) is installed multiple times on the node. The following files correspond to the exact same content: [723bootcamp] {}
[INFO ] 2020-07-23T18:44:13,078Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:13,106Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:13,106Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:13,110Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:43:51.921Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:13,712Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,715Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184351.988/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,715Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,744Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,756Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,756Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,893Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,907Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,909Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,911Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,911Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,976Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:13,983Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:13,985Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:13,986Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:14,168Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:14,169Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:14,200Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:14,201Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,205Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:14,220Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,231Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:14,236Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,245Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:14,307Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:14,319Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,324Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:14,325Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:14,339Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,341Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:14,355Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,355Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:14,355Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:14,355Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:14,358Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184351.988/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:14,359Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:14,359Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184351.988/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:14,391Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:14,413Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:14,413Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:14,416Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:43:51.921Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:14,985Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:14,988Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184351.988/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:14,988Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,008Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,011Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,012Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,131Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,144Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,145Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,150Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,151Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,236Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:15,242Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:15,243Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:15,243Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:15,371Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:15,372Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:15,393Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:15,393Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,395Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:15,404Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,414Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:15,418Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,423Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:15,463Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:15,475Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,480Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529852212) {}
[INFO ] 2020-07-23T18:44:15,481Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:15,494Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,495Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:15,506Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529854201) {}
[INFO ] 2020-07-23T18:44:15,508Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:15,519Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,521Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:15,530Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,530Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:15,530Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529855393) {}
[INFO ] 2020-07-23T18:44:15,530Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-23T18:44:16,055Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[WARN ] 2020-07-23T18:44:16,055Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[ERROR] 2020-07-23T18:44:17,317Z [Mock network] internal.Verifier. - Error validating transaction 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:17,321Z [Mock network] internal.Verifier. - Error validating transaction 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:17,321Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[INFO ] 2020-07-23T18:44:17,329Z [Mock network] statemachine.StaffedFlowHospital. - Flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Invocation, sessionId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=37C13D18355B46D029E42A5228E06421FC0D84C29022B6CD75F17B3E98C9126A), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@51c94754, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a6c069cd-4922-41be-af06-82344ca4b6b4) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[INFO ] 2020-07-23T18:44:17,332Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:17,334Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:17,351Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] errored, dumping all transitions:

 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:15.728Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Invocation, sessionId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=37C13D18355B46D029E42A5228E06421FC0D84C29022B6CD75F17B3E98C9126A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821])
    SignalFlowHasStarted(flowId=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821]
    []


 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.336Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5617534253930741895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)], propagatedIndex=0, propagating=false)


 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.340Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.343Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[WARN ] 2020-07-23T18:44:17,351Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:17,353Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:17,396Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] errored, dumping all transitions:

 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:15.728Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Invocation, sessionId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=37C13D18355B46D029E42A5228E06421FC0D84C29022B6CD75F17B3E98C9126A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821])
    SignalFlowHasStarted(flowId=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@30902821]
    []


 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.336Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5617534253930741895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)], propagatedIndex=0, propagating=false)


 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.340Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.343Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] ---
  Timestamp: 2020-07-23T18:44:17.392Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672, errorId=5617534253930741895)], sessions=[], senderUUID=a6c069cd-4922-41be-af06-82344ca4b6b4)
    CreateTransaction
    RemoveCheckpoint(id=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[bf36cdb1-bb09-4fcb-8bac-43d6b7291f35], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5617534253930741895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Invocation, sessionId=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, timestamp: 2020-07-23T18:44:15.565Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=37C13D18355B46D029E42A5228E06421FC0D84C29022B6CD75F17B3E98C9126A), errorState=Errored(errors=[FlowError(errorId=5617534253930741895, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@51c94754, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a6c069cd-4922-41be-af06-82344ca4b6b4))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
[WARN ] 2020-07-23T18:44:17,397Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [bf36cdb1-bb09-4fcb-8bac-43d6b7291f35] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bf36cdb1-bb09-4fcb-8bac-43d6b7291f35, invocation_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, invocation_timestamp=2020-07-23T18:44:15.565Z, origin=Only For Testing, session_id=2811d901-c8c4-44ba-9fd4-92ed6eea7ffb, session_timestamp=2020-07-23T18:44:15.565Z, thread-id=156}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 52EAB59272C3999506AF53B2D269C2D980AB9A4DDEFC25671C32BF6FFA41C672
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:17,563Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184417.463/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:17,563Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:17,564Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:17,623Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:17,628Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:17,628Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:17,634Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:17.463Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:18,210Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,221Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184417.463/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,221Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,239Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,241Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,241Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,362Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,376Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,377Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,379Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,379Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,452Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:18,488Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:18,498Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:18,498Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:18,607Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:18,610Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:18,610Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,615Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:18,636Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,650Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:18,657Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,667Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:18,707Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:18,708Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:18,708Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:18,717Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,725Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,725Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:18,725Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:18,725Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:18,729Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184417.463/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:18,730Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:18,730Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:18,756Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:18,774Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:18,774Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:18,778Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:17.463Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:19,219Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,220Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184417.463/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,220Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,230Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,232Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,232Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,349Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,359Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,360Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,362Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,362Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,418Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:19,423Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:19,424Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:19,424Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:19,501Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:19,503Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:19,523Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:19,523Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,525Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:19,531Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,538Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:19,542Z [MockNode-5-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,548Z [MockNode-5-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:19,597Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:19,607Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,612Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:19,614Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:19,625Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,626Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:19,638Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,638Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:19,639Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:19,639Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:19,643Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184417.463/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:19,643Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:19,643Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184417.463/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:19,673Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:19,692Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:19,692Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:19,695Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:17.463Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:20,110Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,113Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184417.463/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,113Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,127Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,129Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,129Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,266Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,287Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,289Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,291Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,291Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,344Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:20,349Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:20,350Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:20,350Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:20,448Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:20,449Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:20,471Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:20,471Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,472Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:20,479Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,486Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:20,489Z [MockNode-6-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,493Z [MockNode-6-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:20,521Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:20,527Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,529Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529858610) {}
[INFO ] 2020-07-23T18:44:20,530Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:20,537Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,539Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:20,547Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529859523) {}
[INFO ] 2020-07-23T18:44:20,548Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:20,555Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,556Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:20,563Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,563Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:20,564Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529860471) {}
[INFO ] 2020-07-23T18:44:20,564Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:44:21,893Z [Mock network] internal.Verifier. - Error validating transaction 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:21,898Z [Mock network] internal.Verifier. - Error validating transaction 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:21,898Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
[INFO ] 2020-07-23T18:44:21,899Z [Mock network] statemachine.StaffedFlowHospital. - Flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Invocation, sessionId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E06277860DF3D7DAD8AF104E7042BCE52F6C5854DD5311FAFFF3E4298E350EF9), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4e445991, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b0292003-b2ea-4a78-b343-41148a237918) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
[INFO ] 2020-07-23T18:44:21,899Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:21,900Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:21,903Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] errored, dumping all transitions:

 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:20.569Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Invocation, sessionId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E06277860DF3D7DAD8AF104E7042BCE52F6C5854DD5311FAFFF3E4298E350EF9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10])
    SignalFlowHasStarted(flowId=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10]
    []


 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-975668175467523257, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
[WARN ] 2020-07-23T18:44:21,903Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:21,903Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:21,914Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] errored, dumping all transitions:

 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:20.569Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Invocation, sessionId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E06277860DF3D7DAD8AF104E7042BCE52F6C5854DD5311FAFFF3E4298E350EF9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10])
    SignalFlowHasStarted(flowId=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@978ab10]
    []


 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-975668175467523257, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)], propagatedIndex=0, propagating=false)


 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.900Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] ---
  Timestamp: 2020-07-23T18:44:21.913Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C, errorId=-975668175467523257)], sessions=[], senderUUID=b0292003-b2ea-4a78-b343-41148a237918)
    CreateTransaction
    RemoveCheckpoint(id=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=a05c4020-6651-44a7-b7e9-bdcee2ebec0f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[a05c4020-6651-44a7-b7e9-bdcee2ebec0f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-975668175467523257, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Invocation, sessionId=f5038956-e62a-49ed-a1c9-604436b70718, timestamp: 2020-07-23T18:44:20.564Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=E06277860DF3D7DAD8AF104E7042BCE52F6C5854DD5311FAFFF3E4298E350EF9), errorState=Errored(errors=[FlowError(errorId=-975668175467523257, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@4e445991, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b0292003-b2ea-4a78-b343-41148a237918))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
[WARN ] 2020-07-23T18:44:21,914Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a05c4020-6651-44a7-b7e9-bdcee2ebec0f] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=a05c4020-6651-44a7-b7e9-bdcee2ebec0f, invocation_id=f5038956-e62a-49ed-a1c9-604436b70718, invocation_timestamp=2020-07-23T18:44:20.564Z, origin=Only For Testing, session_id=f5038956-e62a-49ed-a1c9-604436b70718, session_timestamp=2020-07-23T18:44:20.564Z, thread-id=290}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 64D2CF58767A87055C61199C63C812391E01F1DF6833E7252275079174328D8C
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:22,075Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184421.987/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:22,077Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:22,077Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:22,122Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:22,129Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:22,129Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:22,139Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:21.987Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:22,611Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,613Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184421.987/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,613Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,625Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,627Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,627Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,726Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,739Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,740Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,747Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,747Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,819Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:22,852Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:22,863Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:22,863Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:22,980Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:22,985Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:22,985Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:22,987Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:23,005Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:23,017Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:23,021Z [MockNode-7-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:23,026Z [MockNode-7-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:23,062Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:23,064Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:23,064Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:23,072Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:23,075Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:23,075Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:23,075Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:23,075Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:23,079Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184421.987/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:23,079Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:23,079Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:23,132Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:23,156Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:23,156Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:23,159Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:21.987Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:23,547Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,549Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184421.987/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,549Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,562Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,564Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,564Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,658Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,716Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,717Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,719Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,719Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,786Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:23,791Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:23,792Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:23,792Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:23,913Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:23,914Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:23,937Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:23,937Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:23,939Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:23,947Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:23,955Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:23,958Z [MockNode-8-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:23,963Z [MockNode-8-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:24,007Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:24,015Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:24,018Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:24,019Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:24,029Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:24,030Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:24,040Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:24,041Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:24,041Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:24,041Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:24,044Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184421.987/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:24,044Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:24,044Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184421.987/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:24,081Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:24,106Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:24,106Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:24,110Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:21.987Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:24,519Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,521Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184421.987/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,521Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,533Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,535Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,535Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,626Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,634Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,636Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,638Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,638Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,692Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:24,697Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:24,698Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:24,698Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:24,779Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:24,780Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:24,804Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:24,805Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,806Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:24,817Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,823Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:24,826Z [MockNode-9-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,831Z [MockNode-9-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:24,867Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:24,877Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,881Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529862985) {}
[INFO ] 2020-07-23T18:44:24,883Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:24,893Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,894Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:24,904Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529863937) {}
[INFO ] 2020-07-23T18:44:24,905Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:24,914Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,915Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:24,923Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,923Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:24,923Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529864805) {}
[INFO ] 2020-07-23T18:44:24,923Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:44:26,100Z [Mock network] internal.Verifier. - Error validating transaction 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:26,104Z [Mock network] internal.Verifier. - Error validating transaction 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:26,104Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
[INFO ] 2020-07-23T18:44:26,105Z [Mock network] statemachine.StaffedFlowHospital. - Flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Invocation, sessionId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A3DEEFE4D815EFC2F6EEB0199E7F1AFBDC84E8C6BC287E0481A32056CC61BAFA), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7f4462e5, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=79266ab5-7bea-4bc2-93cd-4b4253a93f77) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
[INFO ] 2020-07-23T18:44:26,105Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:26,105Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:26,108Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] errored, dumping all transitions:

 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:24.928Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Invocation, sessionId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A3DEEFE4D815EFC2F6EEB0199E7F1AFBDC84E8C6BC287E0481A32056CC61BAFA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1])
    SignalFlowHasStarted(flowId=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1]
    []


 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.105Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5630144230841440336, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)], propagatedIndex=0, propagating=false)


 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.106Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.106Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
[WARN ] 2020-07-23T18:44:26,108Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:26,108Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:26,118Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] errored, dumping all transitions:

 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:24.928Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Invocation, sessionId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A3DEEFE4D815EFC2F6EEB0199E7F1AFBDC84E8C6BC287E0481A32056CC61BAFA), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1])
    SignalFlowHasStarted(flowId=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cd96ec1]
    []


 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.105Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5630144230841440336, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)], propagatedIndex=0, propagating=false)


 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.106Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.106Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] ---
  Timestamp: 2020-07-23T18:44:26.117Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7, errorId=5630144230841440336)], sessions=[], senderUUID=79266ab5-7bea-4bc2-93cd-4b4253a93f77)
    CreateTransaction
    RemoveCheckpoint(id=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=256ed2f7-d367-48fc-bc6a-d6bcb44d2181)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[256ed2f7-d367-48fc-bc6a-d6bcb44d2181], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5630144230841440336, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Invocation, sessionId=00d6c541-85d3-4d26-8c83-352666b4a821, timestamp: 2020-07-23T18:44:24.924Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A3DEEFE4D815EFC2F6EEB0199E7F1AFBDC84E8C6BC287E0481A32056CC61BAFA), errorState=Errored(errors=[FlowError(errorId=5630144230841440336, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@7f4462e5, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=79266ab5-7bea-4bc2-93cd-4b4253a93f77))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
[WARN ] 2020-07-23T18:44:26,118Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [256ed2f7-d367-48fc-bc6a-d6bcb44d2181] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=256ed2f7-d367-48fc-bc6a-d6bcb44d2181, invocation_id=00d6c541-85d3-4d26-8c83-352666b4a821, invocation_timestamp=2020-07-23T18:44:24.924Z, origin=Only For Testing, session_id=00d6c541-85d3-4d26-8c83-352666b4a821, session_timestamp=2020-07-23T18:44:24.924Z, thread-id=421}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 8E50D482BFE2EA95405721B4D79E3C05BB073D5E500CECC7F60E439C42504AA7
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:26,197Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184426.129/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:26,197Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:26,197Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:26,228Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:26,230Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:26,230Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:26,235Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:26.129Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:26,656Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,658Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184426.129/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,658Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,668Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,670Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,670Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,765Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,786Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,787Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,789Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,789Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,844Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:26,866Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:26,877Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:26,877Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:26,988Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:26,992Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:26,992Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:26,994Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:27,011Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,023Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:27,026Z [MockNode-10-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,030Z [MockNode-10-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,058Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:27,060Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:27,060Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:27,067Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,069Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,069Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,069Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,069Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,072Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184426.129/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:27,072Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:27,072Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:27,102Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:27,130Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:27,130Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:27,133Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:26.129Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:27,483Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,485Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184426.129/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,485Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,495Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,497Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,497Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,572Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,582Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,583Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,585Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,585Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,639Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:27,644Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:27,645Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:27,645Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:27,740Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:27,741Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:27,761Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:27,761Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,762Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:27,769Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,775Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:27,779Z [MockNode-11-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,783Z [MockNode-11-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,843Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:27,853Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,855Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:27,856Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:27,864Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,865Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:27,874Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,874Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,874Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:27,874Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:27,877Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184426.129/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:27,878Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:27,878Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184426.129/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:27,907Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:27,926Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:27,927Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:27,930Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:26.129Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:28,290Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,292Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184426.129/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,292Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,303Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,305Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,305Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,385Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,394Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,395Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,396Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,396Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,445Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:28,450Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:28,451Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:28,451Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:28,540Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:28,541Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:28,561Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:28,561Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,562Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:28,567Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,572Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:28,575Z [MockNode-12-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,579Z [MockNode-12-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:28,610Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:28,619Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,621Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529866992) {}
[INFO ] 2020-07-23T18:44:28,622Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:28,629Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,630Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:28,639Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529867761) {}
[INFO ] 2020-07-23T18:44:28,640Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:28,648Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,649Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:28,656Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,656Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:28,656Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529868561) {}
[INFO ] 2020-07-23T18:44:28,656Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:44:29,790Z [Mock network] internal.Verifier. - Error validating transaction A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:29,794Z [Mock network] internal.Verifier. - Error validating transaction A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:29,794Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
[INFO ] 2020-07-23T18:44:29,796Z [Mock network] statemachine.StaffedFlowHospital. - Flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Invocation, sessionId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A4E90D06916B2F35DD5D201ACAD5758454384CC9527BEF904744D08156F3FDEE), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@76a3edbb, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=083e72cf-10ac-442c-b4dc-82540ccac67b) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
[INFO ] 2020-07-23T18:44:29,796Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:29,796Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:29,797Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] errored, dumping all transitions:

 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:28.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Invocation, sessionId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A4E90D06916B2F35DD5D201ACAD5758454384CC9527BEF904744D08156F3FDEE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2])
    SignalFlowHasStarted(flowId=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2]
    []


 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=628184647673033163, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)], propagatedIndex=0, propagating=false)


 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
[WARN ] 2020-07-23T18:44:29,797Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:29,797Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:29,804Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] errored, dumping all transitions:

 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:28.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Invocation, sessionId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A4E90D06916B2F35DD5D201ACAD5758454384CC9527BEF904744D08156F3FDEE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2])
    SignalFlowHasStarted(flowId=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@186a5cb2]
    []


 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=628184647673033163, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)], propagatedIndex=0, propagating=false)


 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.796Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] ---
  Timestamp: 2020-07-23T18:44:29.803Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B, errorId=628184647673033163)], sessions=[], senderUUID=083e72cf-10ac-442c-b4dc-82540ccac67b)
    CreateTransaction
    RemoveCheckpoint(id=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[196c61b0-b26b-4c63-9ea2-d3accf8b7ad0], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=628184647673033163, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Invocation, sessionId=4206f05f-6772-4ea1-8da0-4c524afeecc5, timestamp: 2020-07-23T18:44:28.657Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A4E90D06916B2F35DD5D201ACAD5758454384CC9527BEF904744D08156F3FDEE), errorState=Errored(errors=[FlowError(errorId=628184647673033163, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@76a3edbb, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=083e72cf-10ac-442c-b4dc-82540ccac67b))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
[WARN ] 2020-07-23T18:44:29,804Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [196c61b0-b26b-4c63-9ea2-d3accf8b7ad0] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=196c61b0-b26b-4c63-9ea2-d3accf8b7ad0, invocation_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, invocation_timestamp=2020-07-23T18:44:28.657Z, origin=Only For Testing, session_id=4206f05f-6772-4ea1-8da0-4c524afeecc5, session_timestamp=2020-07-23T18:44:28.657Z, thread-id=552}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: A61C06E705504A2D87FA3037F2435A9F1F57BF0A809629507A9DD8ABB245253B
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:29,886Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184429.820/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:29,886Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:29,886Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:29,929Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:29,934Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:29,934Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:29,952Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:29.820Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:30,284Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,286Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184429.820/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,286Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,293Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,296Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,296Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,384Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,399Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,400Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,403Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,403Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,449Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:30,476Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:30,485Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:30,485Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:30,583Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:30,587Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:30,587Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,589Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:30,604Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,615Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:30,622Z [MockNode-13-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,626Z [MockNode-13-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:30,660Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:30,662Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:30,662Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:30,671Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,673Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,673Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:30,673Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:30,673Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:30,677Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184429.820/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:30,677Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:30,677Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:30,709Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:30,731Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:30,731Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:30,733Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:29.820Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:31,054Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,056Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184429.820/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,056Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,066Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,067Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,067Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,131Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,146Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,147Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,149Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,149Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,197Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,202Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:31,203Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,203Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,278Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,279Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:31,296Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:31,296Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,298Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:31,303Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,308Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:31,311Z [MockNode-14-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,315Z [MockNode-14-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:31,344Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:31,352Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,354Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:31,355Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:31,362Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,363Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:31,371Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,371Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:31,371Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:31,371Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:31,375Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184429.820/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:31,375Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:31,375Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184429.820/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:31,407Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:31,425Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:31,425Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:31,427Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:29.820Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:31,757Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,758Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184429.820/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,758Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,778Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,779Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,779Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,852Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,860Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,861Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,862Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,862Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,912Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:31,917Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:31,918Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,918Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,997Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:31,998Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:32,020Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:32,020Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,021Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:32,026Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,031Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:32,034Z [MockNode-15-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,038Z [MockNode-15-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:32,072Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:32,079Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,083Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529870587) {}
[INFO ] 2020-07-23T18:44:32,084Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:32,094Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,095Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:32,109Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529871296) {}
[INFO ] 2020-07-23T18:44:32,110Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:32,118Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,119Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:32,126Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,126Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:32,126Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529872020) {}
[INFO ] 2020-07-23T18:44:32,127Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:44:33,276Z [Mock network] internal.Verifier. - Error validating transaction 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:33,279Z [Mock network] internal.Verifier. - Error validating transaction 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:33,279Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
[INFO ] 2020-07-23T18:44:33,281Z [Mock network] statemachine.StaffedFlowHospital. - Flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Invocation, sessionId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=AC3BF4AA4E2DBE72112849BE4202C1436CFB73F38EB127C5A3401D810290D14C), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@33464850, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=65de3afd-bb7b-41bf-ad08-3c0bb1ce74fc) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
[INFO ] 2020-07-23T18:44:33,281Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:33,281Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:33,282Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] errored, dumping all transitions:

 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:32.132Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Invocation, sessionId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=AC3BF4AA4E2DBE72112849BE4202C1436CFB73F38EB127C5A3401D810290D14C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f])
    SignalFlowHasStarted(flowId=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f]
    []


 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.281Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4385629931045977797, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.281Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.282Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
[WARN ] 2020-07-23T18:44:33,282Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:33,283Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:33,291Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] errored, dumping all transitions:

 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:32.132Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Invocation, sessionId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=AC3BF4AA4E2DBE72112849BE4202C1436CFB73F38EB127C5A3401D810290D14C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f])
    SignalFlowHasStarted(flowId=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7d74e43f]
    []


 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.281Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4385629931045977797, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.281Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.282Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] ---
  Timestamp: 2020-07-23T18:44:33.290Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA, errorId=-4385629931045977797)], sessions=[], senderUUID=65de3afd-bb7b-41bf-ad08-3c0bb1ce74fc)
    CreateTransaction
    RemoveCheckpoint(id=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4385629931045977797, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Invocation, sessionId=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, timestamp: 2020-07-23T18:44:32.128Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=AC3BF4AA4E2DBE72112849BE4202C1436CFB73F38EB127C5A3401D810290D14C), errorState=Errored(errors=[FlowError(errorId=-4385629931045977797, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@33464850, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=65de3afd-bb7b-41bf-ad08-3c0bb1ce74fc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
[WARN ] 2020-07-23T18:44:33,291Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=e5ed733f-5ab3-4072-963e-dbaf3cbf0ea0, invocation_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, invocation_timestamp=2020-07-23T18:44:32.128Z, origin=Only For Testing, session_id=dfbdb1e2-9a0e-47b1-ad84-042f4a50e6ca, session_timestamp=2020-07-23T18:44:32.128Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0E5712ADA7DC0A29218CFFAD7E0873FFDC8A078245DA7AEE29FB9404E9A1AABA
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:33,356Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184433.303/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:44:33,356Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:33,356Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:33,378Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:33,381Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:33,381Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:33,390Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:33.303Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:33,787Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,789Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184433.303/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,789Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,799Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,801Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,801Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,877Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,886Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,887Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,888Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,888Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,948Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:33,969Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:33,979Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:33,979Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:34,059Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:44:34,064Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:34,064Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,065Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:34,080Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,089Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:34,094Z [MockNode-16-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,098Z [MockNode-16-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,137Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:34,138Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:44:34,139Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:44:34,150Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,156Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,156Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,156Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,156Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,158Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184433.303/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:44:34,158Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:34,158Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:34,174Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:34,194Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:34,194Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:34,196Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:33.303Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:34,484Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,486Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184433.303/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,486Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,494Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,495Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,495Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,552Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,559Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,560Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,561Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,561Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,606Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:34,611Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:34,612Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:34,612Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:34,690Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:34,691Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:34,710Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:34,710Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,711Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:34,717Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,722Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:34,725Z [MockNode-17-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,729Z [MockNode-17-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,765Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:34,772Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,774Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:34,774Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:34,782Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,783Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:34,791Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,791Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,791Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:34,791Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:34,795Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184433.303/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:44:34,795Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:44:34,795Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184433.303/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:44:34,830Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:44:34,845Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:34,845Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:44:34,847Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:44:33.303Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:44:35,167Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,169Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184433.303/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,169Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,179Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,185Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,185Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,255Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,263Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,264Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,266Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,266Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,325Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:44:35,330Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:44:35,331Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:35,331Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:35,421Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:44:35,421Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:44:35,441Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:44:35,441Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,442Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:35,447Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,451Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:44:35,454Z [MockNode-18-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,457Z [MockNode-18-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:35,491Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:44:35,496Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,498Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529874064) {}
[INFO ] 2020-07-23T18:44:35,499Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:44:35,506Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,507Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:35,515Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529874710) {}
[INFO ] 2020-07-23T18:44:35,517Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:35,524Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,525Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:44:35,533Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,533Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:44:35,533Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529875441) {}
[INFO ] 2020-07-23T18:44:35,533Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:44:36,624Z [Mock network] internal.Verifier. - Error validating transaction 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:44:36,627Z [Mock network] internal.Verifier. - Error validating transaction 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:44:36,627Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
[INFO ] 2020-07-23T18:44:36,629Z [Mock network] statemachine.StaffedFlowHospital. - Flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Invocation, sessionId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F6732834A68980EDA02C4691B2D74262E8E5648F0463B97034E0D00C42C4B855), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1c8cc45e, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=acd531e6-9791-491d-a47a-a828c131d766) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
[INFO ] 2020-07-23T18:44:36,629Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:44:36,629Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:36,630Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] errored, dumping all transitions:

 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:35.540Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[67025ece-4edf-4472-94c5-7e585b4dfdf8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Invocation, sessionId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F6732834A68980EDA02C4691B2D74262E8E5648F0463B97034E0D00C42C4B855), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6])
    SignalFlowHasStarted(flowId=[67025ece-4edf-4472-94c5-7e585b4dfdf8])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6]
    []


 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8263249386102256686, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)], propagatedIndex=0, propagating=false)


 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
[WARN ] 2020-07-23T18:44:36,630Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:36,630Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:44:36,638Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] errored, dumping all transitions:

 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:35.540Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[67025ece-4edf-4472-94c5-7e585b4dfdf8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Invocation, sessionId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F6732834A68980EDA02C4691B2D74262E8E5648F0463B97034E0D00C42C4B855), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6])
    SignalFlowHasStarted(flowId=[67025ece-4edf-4472-94c5-7e585b4dfdf8])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@628c09f6]
    []


 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8263249386102256686, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)], propagatedIndex=0, propagating=false)


 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.629Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] ---
  Timestamp: 2020-07-23T18:44:36.637Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0, errorId=8263249386102256686)], sessions=[], senderUUID=acd531e6-9791-491d-a47a-a828c131d766)
    CreateTransaction
    RemoveCheckpoint(id=[67025ece-4edf-4472-94c5-7e585b4dfdf8])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=67025ece-4edf-4472-94c5-7e585b4dfdf8)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[67025ece-4edf-4472-94c5-7e585b4dfdf8], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8263249386102256686, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Invocation, sessionId=c548cff6-4166-4138-8761-389c10e98c0b, timestamp: 2020-07-23T18:44:35.537Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F6732834A68980EDA02C4691B2D74262E8E5648F0463B97034E0D00C42C4B855), errorState=Errored(errors=[FlowError(errorId=8263249386102256686, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1c8cc45e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=acd531e6-9791-491d-a47a-a828c131d766))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
[WARN ] 2020-07-23T18:44:36,638Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [67025ece-4edf-4472-94c5-7e585b4dfdf8] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=67025ece-4edf-4472-94c5-7e585b4dfdf8, invocation_id=c548cff6-4166-4138-8761-389c10e98c0b, invocation_timestamp=2020-07-23T18:44:35.537Z, origin=Only For Testing, session_id=c548cff6-4166-4138-8761-389c10e98c0b, session_timestamp=2020-07-23T18:44:35.537Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 336038BC058EBF527FEBDB6FB336CE55F8125A1B00F6BC709C3A1A703AA851C0
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:18,056Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in /home/eamonn/723bootcamp ... {}
[INFO ] 2020-07-23T18:46:18,357Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:46:19,695Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:46:20,501Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-23T18:46:20,516Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:46:20,517Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:46:21,009Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:46:21,040Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-23T18:46:21,456Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:46:21,456Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:46:21,456Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-23T18:46:21,617Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:46:21,627Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:46:22,157Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-23T18:46:22,393Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:46:22,393Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:46:22,424Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:46:22,424Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:46:22,424Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:46:23,224Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:46:23,224Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:46:23,305Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,346Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:46:23,406Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-07-23T18:46:23,561Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:46:23,562Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-07-23T18:46:23,592Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:46:23,633Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-07-23T18:46:23,633Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:46:23,691Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,691Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-07-23T18:46:23,701Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,701Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-07-23T18:46:23,701Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,701Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,722Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-07-23T18:46:23,783Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,783Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,793Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,793Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,793Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:46:23,794Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:46:23,804Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,804Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-07-23T18:46:23,820Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:46:23,821Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:46:23,827Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project '723bootcamp' {}
[INFO ] 2020-07-23T18:46:23,827Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:46:23,829Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:46:23,858Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in /home/eamonn/723bootcamp/.gradle {}
[INFO ] 2020-07-23T18:46:23,858Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:46:23,883Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-23T18:46:24,013Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184612.540/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:24,017Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:24,036Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:24,822Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:24,918Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:24,919Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:25,062Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:12.488Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:29,508Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:29,513Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184612.540/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:29,513Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:29,549Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:29,629Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:29,636Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:31,579Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,175Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,177Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,181Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,181Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,281Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:32,337Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:32,358Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:32,358Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:32,590Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:32,601Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:32,601Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:32,607Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:32,802Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:32,863Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:32,892Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:32,926Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:32,974Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:32,980Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:32,983Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:33,393Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:33,413Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:33,414Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:33,415Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:33,415Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:33,422Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184612.540/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:33,422Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:33,422Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/1/cordapps/723bootcamp.jar {}
[WARN ] 2020-07-23T18:46:33,437Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: 723bootcamp) is installed multiple times on the node. The following files correspond to the exact same content: [723bootcamp] {}
[INFO ] 2020-07-23T18:46:33,461Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:33,502Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:33,502Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:33,506Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:12.488Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:34,093Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,096Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184612.540/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,096Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,117Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,119Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,119Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,259Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,274Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,276Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,278Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,278Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,378Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:34,385Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:34,388Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:34,388Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:34,539Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:34,541Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:34,569Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:34,570Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,572Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:34,582Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,591Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:34,595Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,613Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:34,676Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:34,690Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,698Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:34,700Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:34,720Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,722Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:34,734Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,735Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:34,735Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:34,735Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:34,739Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184612.540/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:34,740Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:34,740Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184612.540/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:34,770Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:34,792Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:34,792Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:34,794Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:12.488Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:35,302Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,305Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184612.540/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,305Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,321Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,324Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,324Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,435Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,445Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,447Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,449Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,449Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,562Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:35,568Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:35,569Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:35,569Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:35,658Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:35,659Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:35,679Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:35,679Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,681Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:35,689Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,696Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:35,699Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,704Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:35,736Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:35,745Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,748Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529992601) {}
[INFO ] 2020-07-23T18:46:35,749Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:35,763Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,764Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:35,775Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529994569) {}
[INFO ] 2020-07-23T18:46:35,777Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:35,786Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,787Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:35,798Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,798Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:35,798Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595529995679) {}
[INFO ] 2020-07-23T18:46:35,798Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-23T18:46:36,360Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[WARN ] 2020-07-23T18:46:36,360Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[ERROR] 2020-07-23T18:46:37,657Z [Mock network] internal.Verifier. - Error validating transaction 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:37,663Z [Mock network] internal.Verifier. - Error validating transaction 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:37,663Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[INFO ] 2020-07-23T18:46:37,672Z [Mock network] statemachine.StaffedFlowHospital. - Flow [6ca817cb-7270-4aa0-b748-f1038bd63011] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Invocation, sessionId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A33C5133F7295298ED1C49D54C314C9B49ED9EDC38F7CF874E109A3446AAC167), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@13368a61, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=2c0aea23-5a9e-4667-bb07-5ebf529daf8a) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[INFO ] 2020-07-23T18:46:37,675Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:37,677Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:37,694Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6ca817cb-7270-4aa0-b748-f1038bd63011] errored, dumping all transitions:

 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:36.328Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6ca817cb-7270-4aa0-b748-f1038bd63011], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Invocation, sessionId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A33C5133F7295298ED1C49D54C314C9B49ED9EDC38F7CF874E109A3446AAC167), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf])
    SignalFlowHasStarted(flowId=[6ca817cb-7270-4aa0-b748-f1038bd63011])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf]
    []


 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.678Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3825565829492433974, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.683Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.685Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[WARN ] 2020-07-23T18:46:37,694Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6ca817cb-7270-4aa0-b748-f1038bd63011] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:37,697Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:37,748Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6ca817cb-7270-4aa0-b748-f1038bd63011] errored, dumping all transitions:

 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:36.328Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6ca817cb-7270-4aa0-b748-f1038bd63011], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Invocation, sessionId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A33C5133F7295298ED1C49D54C314C9B49ED9EDC38F7CF874E109A3446AAC167), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf])
    SignalFlowHasStarted(flowId=[6ca817cb-7270-4aa0-b748-f1038bd63011])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5d60ccf]
    []


 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.678Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3825565829492433974, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)], propagatedIndex=0, propagating=false)


 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.683Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.685Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6ca817cb-7270-4aa0-b748-f1038bd63011] ---
  Timestamp: 2020-07-23T18:46:37.741Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F, errorId=-3825565829492433974)], sessions=[], senderUUID=2c0aea23-5a9e-4667-bb07-5ebf529daf8a)
    CreateTransaction
    RemoveCheckpoint(id=[6ca817cb-7270-4aa0-b748-f1038bd63011])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=6ca817cb-7270-4aa0-b748-f1038bd63011)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[6ca817cb-7270-4aa0-b748-f1038bd63011], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3825565829492433974, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Invocation, sessionId=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, timestamp: 2020-07-23T18:46:35.832Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A33C5133F7295298ED1C49D54C314C9B49ED9EDC38F7CF874E109A3446AAC167), errorState=Errored(errors=[FlowError(errorId=-3825565829492433974, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@13368a61, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=2c0aea23-5a9e-4667-bb07-5ebf529daf8a))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
[WARN ] 2020-07-23T18:46:37,748Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [6ca817cb-7270-4aa0-b748-f1038bd63011] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6ca817cb-7270-4aa0-b748-f1038bd63011, invocation_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, invocation_timestamp=2020-07-23T18:46:35.832Z, origin=Only For Testing, session_id=6d223f73-8ab4-40c5-9ae4-9b3f2b47f4ed, session_timestamp=2020-07-23T18:46:35.832Z, thread-id=155}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 61E95CCED1FEA0D0A8780E171E1089D343FABFF9A12D5BF04FCC95092CEDDB3F
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:37,889Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184637.819/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:37,889Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:37,889Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:37,944Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:37,950Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:37,950Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:37,957Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:37.819Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:38,483Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,485Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184637.819/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,485Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,501Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,506Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,506Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,605Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,618Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,619Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,621Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,621Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,691Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:38,723Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:38,735Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:38,735Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:38,854Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:38,859Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:38,859Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,861Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:38,878Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,888Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:38,891Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,897Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:38,932Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:38,934Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:38,934Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:38,943Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,946Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,946Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:38,946Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:38,946Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:38,950Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184637.819/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:38,950Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:38,950Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:38,977Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:38,998Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:38,998Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:39,001Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:37.819Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:39,481Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,483Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184637.819/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,483Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,498Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,500Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,500Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,611Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,621Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,623Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,625Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,625Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,684Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:39,689Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:39,690Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:39,690Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:39,812Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:39,813Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:39,833Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:39,833Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,835Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:39,841Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,848Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:39,851Z [MockNode-5-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,856Z [MockNode-5-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:39,887Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:39,895Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,897Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:39,899Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:39,908Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,910Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:39,921Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,921Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:39,921Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:39,922Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:39,926Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184637.819/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:39,927Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:39,927Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184637.819/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:39,953Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:39,976Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:39,976Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:39,980Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:37.819Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:40,403Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,406Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184637.819/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,406Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,419Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,421Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,421Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,548Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,560Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,561Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,563Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,563Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,620Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:40,625Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:40,626Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:40,626Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:40,754Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:40,755Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:40,783Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:40,783Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,786Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:40,796Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,806Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:40,814Z [MockNode-6-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,821Z [MockNode-6-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:40,886Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:40,894Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,898Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595529998859) {}
[INFO ] 2020-07-23T18:46:40,899Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:40,914Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,915Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:40,928Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595529999833) {}
[INFO ] 2020-07-23T18:46:40,931Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:40,946Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,948Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:40,960Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,960Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:40,961Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530000783) {}
[INFO ] 2020-07-23T18:46:40,961Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:46:42,475Z [Mock network] internal.Verifier. - Error validating transaction 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:42,479Z [Mock network] internal.Verifier. - Error validating transaction 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:42,479Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
[INFO ] 2020-07-23T18:46:42,481Z [Mock network] statemachine.StaffedFlowHospital. - Flow [403670f5-d029-4832-b98c-3a7d4d69b581] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Invocation, sessionId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=433C88D9F3AB7CAEA2A460955989C198CA85C4D5E4A106D0CABFA245D8818C18), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3e3b48d8, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=02b88367-171b-4f47-a60e-63168487f3e8) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
[INFO ] 2020-07-23T18:46:42,481Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:42,481Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:42,484Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [403670f5-d029-4832-b98c-3a7d4d69b581] errored, dumping all transitions:

 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:40.968Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[403670f5-d029-4832-b98c-3a7d4d69b581], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Invocation, sessionId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=433C88D9F3AB7CAEA2A460955989C198CA85C4D5E4A106D0CABFA245D8818C18), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a])
    SignalFlowHasStarted(flowId=[403670f5-d029-4832-b98c-3a7d4d69b581])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a]
    []


 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.481Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4268729240845026863, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)], propagatedIndex=0, propagating=false)


 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.481Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.482Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
[WARN ] 2020-07-23T18:46:42,484Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [403670f5-d029-4832-b98c-3a7d4d69b581] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:42,485Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:42,495Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [403670f5-d029-4832-b98c-3a7d4d69b581] errored, dumping all transitions:

 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:40.968Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[403670f5-d029-4832-b98c-3a7d4d69b581], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Invocation, sessionId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=433C88D9F3AB7CAEA2A460955989C198CA85C4D5E4A106D0CABFA245D8818C18), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a])
    SignalFlowHasStarted(flowId=[403670f5-d029-4832-b98c-3a7d4d69b581])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@6cbe538a]
    []


 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.481Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4268729240845026863, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)], propagatedIndex=0, propagating=false)


 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.481Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.482Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [403670f5-d029-4832-b98c-3a7d4d69b581] ---
  Timestamp: 2020-07-23T18:46:42.494Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33, errorId=-4268729240845026863)], sessions=[], senderUUID=02b88367-171b-4f47-a60e-63168487f3e8)
    CreateTransaction
    RemoveCheckpoint(id=[403670f5-d029-4832-b98c-3a7d4d69b581])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=403670f5-d029-4832-b98c-3a7d4d69b581)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[403670f5-d029-4832-b98c-3a7d4d69b581], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4268729240845026863, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Invocation, sessionId=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, timestamp: 2020-07-23T18:46:40.963Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=433C88D9F3AB7CAEA2A460955989C198CA85C4D5E4A106D0CABFA245D8818C18), errorState=Errored(errors=[FlowError(errorId=-4268729240845026863, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3e3b48d8, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=02b88367-171b-4f47-a60e-63168487f3e8))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
[WARN ] 2020-07-23T18:46:42,495Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [403670f5-d029-4832-b98c-3a7d4d69b581] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000002, flow-id=403670f5-d029-4832-b98c-3a7d4d69b581, invocation_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, invocation_timestamp=2020-07-23T18:46:40.963Z, origin=Only For Testing, session_id=f6556e2f-cc4b-4a06-8e37-21d1fc179e73, session_timestamp=2020-07-23T18:46:40.963Z, thread-id=292}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 0FD85823FC1405C0C9570ED68CB5F6A216ABB5197547EE89435BB58E8EA06F33
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:42,643Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184642.557/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:42,644Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:42,644Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:42,667Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:42,671Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:42,671Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:42,680Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:42.557Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:43,140Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,142Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184642.557/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,142Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,157Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,160Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,160Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,281Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,295Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,296Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,301Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,301Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,368Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:43,396Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:43,409Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:43,409Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:43,564Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:43,569Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:43,569Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,571Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:43,590Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,601Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:43,605Z [MockNode-7-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,614Z [MockNode-7-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:43,656Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:43,658Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:43,659Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:43,668Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,671Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,671Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:43,672Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:43,672Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:43,676Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184642.557/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:43,676Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:43,676Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:43,717Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:43,743Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:43,743Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:43,747Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:42.557Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:44,146Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,148Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184642.557/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,148Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,160Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,162Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,163Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,242Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,252Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,253Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,255Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,255Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,334Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:44,340Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:44,341Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:44,341Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:44,461Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:44,463Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:44,487Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:44,487Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,488Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:44,498Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,521Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:44,544Z [MockNode-8-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,550Z [MockNode-8-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:44,587Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:44,595Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,599Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:44,600Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:44,610Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,611Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:44,621Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,621Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:44,622Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:44,622Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:44,625Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184642.557/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:44,626Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:44,626Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184642.557/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:44,666Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:44,688Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:44,688Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:44,692Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:42.557Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:45,036Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,037Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184642.557/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,037Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,050Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,051Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,052Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,136Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,146Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,147Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,155Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,155Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,231Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:45,236Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:45,237Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:45,237Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:45,331Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:45,332Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:45,358Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:45,358Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,360Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:45,367Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,373Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:45,377Z [MockNode-9-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,382Z [MockNode-9-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:45,418Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:45,428Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,431Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530003569) {}
[INFO ] 2020-07-23T18:46:45,432Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:45,442Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,443Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:45,453Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530004487) {}
[INFO ] 2020-07-23T18:46:45,454Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:45,462Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,463Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:45,473Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,473Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:45,474Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530005358) {}
[INFO ] 2020-07-23T18:46:45,474Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:46:46,566Z [Mock network] internal.Verifier. - Error validating transaction C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:46,571Z [Mock network] internal.Verifier. - Error validating transaction C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:46,571Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
[INFO ] 2020-07-23T18:46:46,572Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Invocation, sessionId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3AC28719A15675F9CBC941830EF915E8C8BAE5F19FC2FFF8CA788B42FCD7E3EB), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6bc63111, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=d46aac57-d7e9-44a3-a718-02f7e10debcb) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
[INFO ] 2020-07-23T18:46:46,572Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:46,572Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:46,574Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] errored, dumping all transitions:

 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:45.478Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Invocation, sessionId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3AC28719A15675F9CBC941830EF915E8C8BAE5F19FC2FFF8CA788B42FCD7E3EB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe])
    SignalFlowHasStarted(flowId=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe]
    []


 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.572Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8919284111102921012, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.573Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.573Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
[WARN ] 2020-07-23T18:46:46,574Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:46,574Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:46,583Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] errored, dumping all transitions:

 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:45.478Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Invocation, sessionId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3AC28719A15675F9CBC941830EF915E8C8BAE5F19FC2FFF8CA788B42FCD7E3EB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe])
    SignalFlowHasStarted(flowId=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@26605ffe]
    []


 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.572Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8919284111102921012, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.573Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.573Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] ---
  Timestamp: 2020-07-23T18:46:46.581Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3, errorId=8919284111102921012)], sessions=[], senderUUID=d46aac57-d7e9-44a3-a718-02f7e10debcb)
    CreateTransaction
    RemoveCheckpoint(id=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=ce1b3af9-9f40-45f1-8061-8b2b27bf241d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ce1b3af9-9f40-45f1-8061-8b2b27bf241d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8919284111102921012, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Invocation, sessionId=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, timestamp: 2020-07-23T18:46:45.475Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3AC28719A15675F9CBC941830EF915E8C8BAE5F19FC2FFF8CA788B42FCD7E3EB), errorState=Errored(errors=[FlowError(errorId=8919284111102921012, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6bc63111, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=d46aac57-d7e9-44a3-a718-02f7e10debcb))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
[WARN ] 2020-07-23T18:46:46,583Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce1b3af9-9f40-45f1-8061-8b2b27bf241d] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=ce1b3af9-9f40-45f1-8061-8b2b27bf241d, invocation_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, invocation_timestamp=2020-07-23T18:46:45.475Z, origin=Only For Testing, session_id=1a7f2f9c-a920-4aee-8bbf-041dc080ac75, session_timestamp=2020-07-23T18:46:45.475Z, thread-id=423}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: C7DF273CF9988B0E14646B3163554CE608EA9B67318002BE3BD6085FA67B50F3
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:46,664Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184646.597/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:46,664Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:46,664Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:46,701Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:46,705Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:46,706Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:46,714Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:46.597Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:47,092Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,094Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184646.597/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,094Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,104Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,107Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,107Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,208Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,216Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,217Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,219Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,219Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,265Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,283Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:47,292Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:47,292Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:47,370Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:47,374Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:47,374Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,376Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:47,392Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,404Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:47,408Z [MockNode-10-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,412Z [MockNode-10-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:47,450Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:47,452Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:47,452Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:47,460Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,463Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,463Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:47,463Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:47,463Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:47,467Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184646.597/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:47,468Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:47,468Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:47,512Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:47,530Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:47,530Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:47,533Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:46.597Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:47,878Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,879Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184646.597/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,879Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,890Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,892Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,892Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,955Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,964Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,965Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,966Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:47,966Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,021Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,026Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:48,027Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,027Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,124Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,125Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:48,141Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:48,141Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,143Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:48,149Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,154Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:48,157Z [MockNode-11-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,161Z [MockNode-11-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:48,193Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:48,200Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,202Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:48,203Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:48,211Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,212Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:48,222Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,222Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:48,222Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:48,222Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:48,226Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184646.597/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:48,226Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:48,226Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184646.597/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:48,248Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:48,268Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:48,269Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:48,272Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:46.597Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:48,629Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,631Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184646.597/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,631Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,643Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,644Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,644Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,739Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,748Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,749Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,751Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,751Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,805Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:48,810Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:48,811Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,811Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,917Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:48,918Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:48,947Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:48,947Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:48,949Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:48,956Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:48,963Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:48,967Z [MockNode-12-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:48,978Z [MockNode-12-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:49,020Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:49,027Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:49,029Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530007374) {}
[INFO ] 2020-07-23T18:46:49,031Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:49,040Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:49,041Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:49,049Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530008141) {}
[INFO ] 2020-07-23T18:46:49,050Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:49,059Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:49,060Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:49,067Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:49,067Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:49,068Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530008947) {}
[INFO ] 2020-07-23T18:46:49,068Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:46:50,213Z [Mock network] internal.Verifier. - Error validating transaction 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:50,217Z [Mock network] internal.Verifier. - Error validating transaction 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:50,217Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
[INFO ] 2020-07-23T18:46:50,220Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ce40b782-7115-4186-8146-143214f83bb3] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Invocation, sessionId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=33B46871BB5F73EA2E1E9C77EBA2BA8065CFEE10598A31F0034E32E0ADA16547), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@2f35fa73, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=1597209c-ac86-4a05-aa96-80ab948a4186) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
[INFO ] 2020-07-23T18:46:50,220Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:50,220Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:50,221Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce40b782-7115-4186-8146-143214f83bb3] errored, dumping all transitions:

 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:49.072Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce40b782-7115-4186-8146-143214f83bb3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Invocation, sessionId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=33B46871BB5F73EA2E1E9C77EBA2BA8065CFEE10598A31F0034E32E0ADA16547), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978])
    SignalFlowHasStarted(flowId=[ce40b782-7115-4186-8146-143214f83bb3])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978]
    []


 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2354682929646814600, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
[WARN ] 2020-07-23T18:46:50,222Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce40b782-7115-4186-8146-143214f83bb3] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:50,222Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:50,234Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce40b782-7115-4186-8146-143214f83bb3] errored, dumping all transitions:

 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:49.072Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ce40b782-7115-4186-8146-143214f83bb3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Invocation, sessionId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=33B46871BB5F73EA2E1E9C77EBA2BA8065CFEE10598A31F0034E32E0ADA16547), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978])
    SignalFlowHasStarted(flowId=[ce40b782-7115-4186-8146-143214f83bb3])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71336978]
    []


 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2354682929646814600, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.220Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ce40b782-7115-4186-8146-143214f83bb3] ---
  Timestamp: 2020-07-23T18:46:50.233Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF, errorId=-2354682929646814600)], sessions=[], senderUUID=1597209c-ac86-4a05-aa96-80ab948a4186)
    CreateTransaction
    RemoveCheckpoint(id=[ce40b782-7115-4186-8146-143214f83bb3])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=ce40b782-7115-4186-8146-143214f83bb3)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[ce40b782-7115-4186-8146-143214f83bb3], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2354682929646814600, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Invocation, sessionId=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, timestamp: 2020-07-23T18:46:49.069Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=33B46871BB5F73EA2E1E9C77EBA2BA8065CFEE10598A31F0034E32E0ADA16547), errorState=Errored(errors=[FlowError(errorId=-2354682929646814600, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@2f35fa73, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=1597209c-ac86-4a05-aa96-80ab948a4186))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
[WARN ] 2020-07-23T18:46:50,234Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ce40b782-7115-4186-8146-143214f83bb3] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000004, flow-id=ce40b782-7115-4186-8146-143214f83bb3, invocation_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, invocation_timestamp=2020-07-23T18:46:49.069Z, origin=Only For Testing, session_id=964c62fd-3f4e-4655-a4d2-0516f3f3a4ab, session_timestamp=2020-07-23T18:46:49.069Z, thread-id=554}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 60EEC115C591F2A134D810DF956DE0B8E3B46F1284627FC83939560FC3E3BFFF
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:50,333Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184650.253/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:50,333Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:50,333Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:50,374Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:50,380Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:50,380Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:50,385Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:50.253Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:50,768Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,770Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184650.253/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,770Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,783Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,786Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,786Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,863Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,872Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,873Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,875Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,875Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,929Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:50,951Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:50,960Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:50,960Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:51,066Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:51,071Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:51,071Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,073Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:51,089Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,100Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:51,119Z [MockNode-13-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,124Z [MockNode-13-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,163Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:51,165Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:51,165Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:51,173Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,176Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,176Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,176Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,176Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,180Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184650.253/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:51,180Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:51,180Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:51,216Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:51,237Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:51,237Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:51,240Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:50.253Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:51,595Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,596Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184650.253/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,596Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,605Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,607Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,607Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,684Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,694Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,695Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,696Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,696Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,753Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:51,757Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:51,757Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:51,757Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:51,830Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:51,831Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:51,850Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:51,850Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,852Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:51,856Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,860Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:51,863Z [MockNode-14-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,866Z [MockNode-14-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,886Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:51,893Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,895Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:51,896Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:51,903Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,904Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:51,912Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,912Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,912Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:51,912Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:51,916Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184650.253/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:51,916Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:51,916Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184650.253/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:51,937Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:51,956Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:51,956Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:51,959Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:50.253Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:52,284Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,285Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184650.253/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,285Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,294Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,296Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,296Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,366Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,374Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,375Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,377Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,377Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,423Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:52,427Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:52,428Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:52,428Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:52,497Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:52,498Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:52,514Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:52,514Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,515Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:52,520Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,524Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:52,526Z [MockNode-15-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,530Z [MockNode-15-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:52,556Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:52,561Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,562Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530011071) {}
[INFO ] 2020-07-23T18:46:52,563Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:52,569Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,570Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:52,577Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530011850) {}
[INFO ] 2020-07-23T18:46:52,578Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:52,584Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,585Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:52,591Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,592Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:52,592Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530012514) {}
[INFO ] 2020-07-23T18:46:52,592Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:46:53,646Z [Mock network] internal.Verifier. - Error validating transaction 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:53,650Z [Mock network] internal.Verifier. - Error validating transaction 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:53,650Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
[INFO ] 2020-07-23T18:46:53,651Z [Mock network] statemachine.StaffedFlowHospital. - Flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Invocation, sessionId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=491620FD137509879BF3EEB420A8B8EF91BCFEE0B3CB7CAC3C838CABE012F955), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@77c32712, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=6710f696-9dad-412f-acfb-b1483ed29089) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
[INFO ] 2020-07-23T18:46:53,651Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:53,652Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:53,653Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] errored, dumping all transitions:

 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:52.595Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[53e9c366-7514-44dd-8aa3-b40f9825f1fd], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Invocation, sessionId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=491620FD137509879BF3EEB420A8B8EF91BCFEE0B3CB7CAC3C838CABE012F955), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2])
    SignalFlowHasStarted(flowId=[53e9c366-7514-44dd-8aa3-b40f9825f1fd])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2]
    []


 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6824030227214124576, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)], propagatedIndex=0, propagating=false)


 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
[WARN ] 2020-07-23T18:46:53,653Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:53,653Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:53,661Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] errored, dumping all transitions:

 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:52.595Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[53e9c366-7514-44dd-8aa3-b40f9825f1fd], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Invocation, sessionId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=491620FD137509879BF3EEB420A8B8EF91BCFEE0B3CB7CAC3C838CABE012F955), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2])
    SignalFlowHasStarted(flowId=[53e9c366-7514-44dd-8aa3-b40f9825f1fd])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@379a1bc2]
    []


 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6824030227214124576, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)], propagatedIndex=0, propagating=false)


 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.652Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] ---
  Timestamp: 2020-07-23T18:46:53.660Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6, errorId=-6824030227214124576)], sessions=[], senderUUID=6710f696-9dad-412f-acfb-b1483ed29089)
    CreateTransaction
    RemoveCheckpoint(id=[53e9c366-7514-44dd-8aa3-b40f9825f1fd])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=53e9c366-7514-44dd-8aa3-b40f9825f1fd)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[53e9c366-7514-44dd-8aa3-b40f9825f1fd], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6824030227214124576, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Invocation, sessionId=936790e0-0c69-4bc2-b286-aa2a9432685d, timestamp: 2020-07-23T18:46:52.593Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=491620FD137509879BF3EEB420A8B8EF91BCFEE0B3CB7CAC3C838CABE012F955), errorState=Errored(errors=[FlowError(errorId=-6824030227214124576, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@77c32712, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=6710f696-9dad-412f-acfb-b1483ed29089))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
[WARN ] 2020-07-23T18:46:53,661Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [53e9c366-7514-44dd-8aa3-b40f9825f1fd] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=53e9c366-7514-44dd-8aa3-b40f9825f1fd, invocation_id=936790e0-0c69-4bc2-b286-aa2a9432685d, invocation_timestamp=2020-07-23T18:46:52.593Z, origin=Only For Testing, session_id=936790e0-0c69-4bc2-b286-aa2a9432685d, session_timestamp=2020-07-23T18:46:52.593Z, thread-id=685}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 63716E23566B9892687929784DCA5C09491C96E94E442A0BFFE0DA05D29D00A6
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:53,727Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184653.674/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:46:53,728Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:53,728Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:53,754Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:53,758Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:53,758Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:53,765Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:53.674Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:54,167Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,168Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184653.674/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,168Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,177Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,178Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,178Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,252Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,263Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,264Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,266Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,266Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,314Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,334Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:54,342Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:54,342Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:54,438Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:46:54,443Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:54,443Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,444Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:54,457Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,464Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:54,469Z [MockNode-16-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,473Z [MockNode-16-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:54,499Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:54,501Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:46:54,501Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:46:54,506Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,509Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,509Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:54,509Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:54,509Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:54,512Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184653.674/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:46:54,512Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:54,512Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:54,537Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:54,561Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:54,561Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:54,563Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:53.674Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:54,845Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,846Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184653.674/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,846Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,854Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,856Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,856Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,909Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,916Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,917Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,918Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,919Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,976Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:54,980Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:54,980Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:54,980Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:55,049Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:55,050Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:55,064Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:55,064Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,066Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,070Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,074Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:55,076Z [MockNode-17-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,080Z [MockNode-17-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:55,106Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:55,111Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,114Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:55,114Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:55,121Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,122Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,130Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,130Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:55,130Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,130Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:55,133Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-184653.674/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:46:55,134Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:46:55,134Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-184653.674/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:46:55,156Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:46:55,171Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:55,171Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:46:55,173Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:46:53.674Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:46:55,471Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,472Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-184653.674/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,472Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,481Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,482Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,482Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,546Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,552Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,553Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,554Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,554Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,604Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:46:55,608Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:46:55,609Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:55,609Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:55,678Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:46:55,679Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:46:55,693Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:46:55,693Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,694Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,699Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,705Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:46:55,708Z [MockNode-18-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,711Z [MockNode-18-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:55,740Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:46:55,745Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,748Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530014443) {}
[INFO ] 2020-07-23T18:46:55,748Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:46:55,755Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,756Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,762Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530015064) {}
[INFO ] 2020-07-23T18:46:55,762Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,770Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,771Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:46:55,778Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,778Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:46:55,779Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530015693) {}
[INFO ] 2020-07-23T18:46:55,779Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[ERROR] 2020-07-23T18:46:56,903Z [Mock network] internal.Verifier. - Error validating transaction 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[ERROR] 2020-07-23T18:46:56,906Z [Mock network] internal.Verifier. - Error validating transaction 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-07-23T18:46:56,906Z [Mock network] corda.flow. - Flow raised an error: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
[INFO ] 2020-07-23T18:46:56,908Z [Mock network] statemachine.StaffedFlowHospital. - Flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Invocation, sessionId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A765CC63333D069A05B653C92C215FDE80EEC085B75C6FF12C58C47528403F53), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@969cb3d, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=197a0034-bf76-420b-85c6-9e40e9716450) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
[INFO ] 2020-07-23T18:46:56,908Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:46:56,908Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:56,909Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] errored, dumping all transitions:

 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:55.783Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Invocation, sessionId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A765CC63333D069A05B653C92C215FDE80EEC085B75C6FF12C58C47528403F53), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933])
    SignalFlowHasStarted(flowId=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933]
    []


 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2277609949401670086, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
[WARN ] 2020-07-23T18:46:56,909Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:56,909Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[WARN ] 2020-07-23T18:46:56,915Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] errored, dumping all transitions:

 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:55.783Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Invocation, sessionId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A765CC63333D069A05B653C92C215FDE80EEC085B75C6FF12C58C47528403F53), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933])
    SignalFlowHasStarted(flowId=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@75598933]
    []


 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: Error(exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2277609949401670086, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)], propagatedIndex=0, propagating=false)


 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.908Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] ---
  Timestamp: 2020-07-23T18:46:56.914Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9, errorId=-2277609949401670086)], sessions=[], senderUUID=197a0034-bf76-420b-85c6-9e40e9716450)
    CreateTransaction
    RemoveCheckpoint(id=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=5fad881e-bf54-48c4-94a6-ea2ad80dfeef)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[5fad881e-bf54-48c4-94a6-ea2ad80dfeef], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2277609949401670086, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Invocation, sessionId=00feab88-48f2-4f3c-8742-5cefee18b78c, timestamp: 2020-07-23T18:46:55.780Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=723bootcamp, corDappHash=029F567710638014B01824E0F8D3E9841AC027D6858D29EB92A68B0542F44034), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A765CC63333D069A05B653C92C215FDE80EEC085B75C6FF12C58C47528403F53), errorState=Errored(errors=[FlowError(errorId=-2277609949401670086, exception=net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@969cb3d, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=197a0034-bf76-420b-85c6-9e40e9716450))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
[WARN ] 2020-07-23T18:46:56,915Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5fad881e-bf54-48c4-94a6-ea2ad80dfeef] error [errorCode=ypon82, moreInformationAt=https://errors.corda.net/OS/4.3/ypon82] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000006, flow-id=5fad881e-bf54-48c4-94a6-ea2ad80dfeef, invocation_id=00feab88-48f2-4f3c-8742-5cefee18b78c, invocation_timestamp=2020-07-23T18:46:55.780Z, origin=Only For Testing, session_id=00feab88-48f2-4f3c-8742-5cefee18b78c, session_timestamp=2020-07-23T18:46:55.780Z, thread-id=816}
net.corda.core.contracts.TransactionVerificationException$ContractRejection: Contract verification failed: Failed requirement: Owner must be required signer, contract: bootcamp.TokenContract, transaction: 034EE9F1BE9417E04892E706E09D9DBF44202DCE91FADFDB43BEFDE64900DEE9
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:403) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:58) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_252]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_252]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_252]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_252]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
Caused by: java.lang.IllegalArgumentException: Failed requirement: Owner must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	... 18 more
[INFO ] 2020-07-23T18:51:36,272Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in /home/eamonn/723bootcamp ... {}
[INFO ] 2020-07-23T18:51:36,628Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:51:38,424Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:51:39,245Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-23T18:51:39,267Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:51:39,268Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:51:39,923Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:51:39,944Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-23T18:51:40,341Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:51:40,341Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:51:40,341Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-23T18:51:40,502Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:51:40,512Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:51:41,221Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-23T18:51:41,521Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:51:41,531Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:51:41,562Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:51:41,562Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:51:41,562Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:51:42,380Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:51:42,380Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:51:42,482Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:42,512Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:51:42,563Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-07-23T18:51:42,737Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:51:42,748Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-07-23T18:51:42,786Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:51:42,826Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-07-23T18:51:42,827Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:51:42,867Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:42,867Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-07-23T18:51:42,867Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:42,882Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-07-23T18:51:42,882Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:42,882Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,912Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-07-23T18:51:42,973Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,973Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,983Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,983Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,984Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,984Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:51:42,996Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:51:43,004Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:43,014Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-07-23T18:51:44,618Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:51:44,628Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:51:44,638Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project '723bootcamp' {}
[INFO ] 2020-07-23T18:51:44,639Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:51:44,642Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:51:44,652Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in /home/eamonn/723bootcamp/.gradle {}
[INFO ] 2020-07-23T18:51:44,652Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:51:44,676Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-23T18:51:44,848Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185130.646/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:51:44,853Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:51:44,875Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:51:45,748Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:51:45,826Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:45,827Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:46,015Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:51:30.592Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:51:50,291Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:50,295Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185130.646/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:50,295Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:50,360Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:50,446Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:50,452Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:52,409Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,032Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,035Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,039Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,039Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,119Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:53,165Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:51:53,192Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:51:53,192Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:51:53,443Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:51:53,453Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:51:53,453Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:53,459Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:51:53,663Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:53,730Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:51:53,753Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:53,791Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:53,836Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:51:53,843Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:51:53,847Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:51:54,371Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:54,404Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:54,406Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:54,406Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:54,406Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:54,413Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185130.646/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:51:54,414Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:51:54,414Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/1/cordapps/723bootcamp.jar {}
[WARN ] 2020-07-23T18:51:54,444Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: 723bootcamp) is installed multiple times on the node. The following files correspond to the exact same content: [723bootcamp] {}
[INFO ] 2020-07-23T18:51:54,464Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:51:54,501Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:54,501Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:54,506Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:51:30.592Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:51:55,141Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,144Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185130.646/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,144Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,173Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,175Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,175Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,339Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,355Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,357Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,359Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,359Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,455Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:55,463Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:51:55,467Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:55,467Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:55,649Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:55,650Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:51:55,677Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:51:55,677Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,680Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:55,688Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,696Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:51:55,701Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,706Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:55,753Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:51:55,765Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,769Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:55,771Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:51:55,783Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,784Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:55,797Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,797Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:55,797Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:55,797Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:55,802Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185130.646/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:51:55,802Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:51:55,802Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185130.646/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:51:55,828Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:51:55,854Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:55,854Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:51:55,857Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:51:30.592Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:51:56,491Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,493Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185130.646/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,493Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,530Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,534Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,534Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,687Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,701Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,703Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,705Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,705Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,777Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:51:56,784Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:51:56,785Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:56,786Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:56,916Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:51:56,918Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:51:56,939Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:51:56,939Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:56,941Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:56,947Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:56,955Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:51:56,958Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:56,964Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:57,005Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:51:57,015Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:57,019Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530313453) {}
[INFO ] 2020-07-23T18:51:57,021Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:51:57,033Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:57,035Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:57,048Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530315677) {}
[INFO ] 2020-07-23T18:51:57,050Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:57,061Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:57,063Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:51:57,075Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:57,075Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:51:57,075Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530316939) {}
[INFO ] 2020-07-23T18:51:57,075Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-23T18:51:57,911Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155}
[WARN ] 2020-07-23T18:51:57,911Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155}
[INFO ] 2020-07-23T18:51:59,848Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:51:59,907Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,046Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,046Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,155Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,193Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,208Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,215Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,222Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=c3c17f5d-5528-427c-a3b1-e40cf8161aa4, invocation_id=5a40788f-a820-4efa-8713-4d951fb6df2a, invocation_timestamp=2020-07-23T18:51:59.756Z, origin=O=Mock Company 1, L=London, C=GB, session_id=5a40788f-a820-4efa-8713-4d951fb6df2a, session_timestamp=2020-07-23T18:51:59.756Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,249Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,249Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=eb58cc1c-40a9-4f21-b03c-ece4098e6a4b, invocation_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, invocation_timestamp=2020-07-23T18:51:57.131Z, origin=Only For Testing, session_id=c0588267-0d9f-4c02-bc92-c8fa31588ace, session_timestamp=2020-07-23T18:51:57.131Z, thread-id=155, tx_id=43C0CB10AEFF09E5C32DB2C7694F877A4738B466708AC19C20AFB44904BFF77B}
[INFO ] 2020-07-23T18:52:00,388Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185200.297/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:52:00,388Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:00,388Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:00,431Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:00,438Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:00,438Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:00,445Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:00.296Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:01,047Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,049Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185200.297/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,049Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,065Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,067Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,067Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,198Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,213Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,220Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,222Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,222Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,314Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:01,346Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:01,357Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:01,357Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:01,513Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:01,519Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:01,520Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,522Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:01,547Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,560Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:01,567Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,574Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:01,620Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:01,622Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:52:01,622Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:52:01,632Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,636Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,636Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:01,636Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:01,636Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:01,641Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185200.297/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:52:01,641Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:01,641Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:01,682Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:01,716Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:01,716Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:01,720Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:00.296Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:02,228Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,230Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185200.297/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,230Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,246Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,248Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,248Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,379Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,391Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,393Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,395Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,395Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,472Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:02,476Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:02,477Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:02,478Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:02,582Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:02,583Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:02,605Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:02,605Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,607Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:02,613Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,620Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:02,623Z [MockNode-5-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,627Z [MockNode-5-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:02,677Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:02,687Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,690Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:02,691Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:02,704Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,705Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:02,716Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,716Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:02,717Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:02,717Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:02,721Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185200.297/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:52:02,721Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:02,721Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185200.297/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:02,757Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:02,782Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:02,782Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:02,785Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:00.296Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:03,187Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,189Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185200.297/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,189Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,202Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,204Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,204Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,339Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,350Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,351Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,354Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,354Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,457Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:03,463Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:03,469Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:03,469Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:03,563Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:03,564Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:03,589Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:03,589Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,590Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:03,600Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,608Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:03,611Z [MockNode-6-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,618Z [MockNode-6-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:03,656Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:03,663Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,667Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530321520) {}
[INFO ] 2020-07-23T18:52:03,669Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:03,678Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,679Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:03,688Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530322605) {}
[INFO ] 2020-07-23T18:52:03,689Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:03,699Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,700Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:03,709Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,709Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:03,709Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530323589) {}
[INFO ] 2020-07-23T18:52:03,709Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:05,215Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,232Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,328Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=81eec586-1709-43a9-8f8c-d26f5f1602fe, invocation_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, invocation_timestamp=2020-07-23T18:52:03.710Z, origin=Only For Testing, session_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, session_timestamp=2020-07-23T18:52:03.710Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,328Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=81eec586-1709-43a9-8f8c-d26f5f1602fe, invocation_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, invocation_timestamp=2020-07-23T18:52:03.710Z, origin=Only For Testing, session_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, session_timestamp=2020-07-23T18:52:03.710Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,349Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=81eec586-1709-43a9-8f8c-d26f5f1602fe, invocation_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, invocation_timestamp=2020-07-23T18:52:03.710Z, origin=Only For Testing, session_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, session_timestamp=2020-07-23T18:52:03.710Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,372Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,382Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,387Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,394Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=17a407ca-795a-47e7-83ea-4714631b42f0, invocation_id=47649512-88b1-4c78-8eef-a324ac0ac63c, invocation_timestamp=2020-07-23T18:52:05.190Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47649512-88b1-4c78-8eef-a324ac0ac63c, session_timestamp=2020-07-23T18:52:05.190Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,417Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=81eec586-1709-43a9-8f8c-d26f5f1602fe, invocation_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, invocation_timestamp=2020-07-23T18:52:03.710Z, origin=Only For Testing, session_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, session_timestamp=2020-07-23T18:52:03.710Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,417Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=81eec586-1709-43a9-8f8c-d26f5f1602fe, invocation_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, invocation_timestamp=2020-07-23T18:52:03.710Z, origin=Only For Testing, session_id=d3e1cbfb-a1c3-4ef6-b03f-61c7b2d040bb, session_timestamp=2020-07-23T18:52:03.710Z, thread-id=290, tx_id=0AFF30FEE5850159160550396B37BE611DCF7579378F870353D90764F1BF8011}
[INFO ] 2020-07-23T18:52:05,500Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185205.441/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:52:05,500Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:05,500Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:05,519Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:05,522Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:05,522Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:05,528Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:05.441Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:05,956Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:05,958Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185205.441/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:05,958Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:05,971Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:05,977Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:05,977Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,100Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,119Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,120Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,123Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,123Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,190Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,210Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:06,217Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:06,217Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:06,304Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:06,309Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:06,309Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,310Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:06,324Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,333Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:06,338Z [MockNode-7-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,344Z [MockNode-7-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:06,374Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:06,376Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:52:06,376Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:52:06,384Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,387Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,387Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:06,387Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:06,387Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:06,391Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185205.441/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:52:06,391Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:06,391Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:06,417Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:06,440Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:06,440Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:06,443Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:05.441Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:06,813Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,815Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185205.441/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,815Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,828Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,837Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,837Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,914Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,924Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,926Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,927Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,927Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,984Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:06,989Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:06,990Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:06,990Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:07,096Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:07,098Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:07,121Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:07,121Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,123Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:07,129Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,136Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:07,139Z [MockNode-8-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,143Z [MockNode-8-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:07,178Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:07,185Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,189Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:07,190Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:07,197Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,199Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:07,208Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,208Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:07,208Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:07,208Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:07,212Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185205.441/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:52:07,212Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:07,212Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185205.441/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:07,238Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:07,255Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:07,255Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:07,263Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:05.441Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:07,603Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,604Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185205.441/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,604Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,632Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,635Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,635Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,752Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,758Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,759Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,761Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,761Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,807Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:07,812Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:07,813Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:07,813Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:07,930Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:07,931Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:07,952Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:07,952Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:07,954Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:07,961Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:07,968Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:07,971Z [MockNode-9-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:07,976Z [MockNode-9-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:08,005Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:08,012Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:08,015Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530326309) {}
[INFO ] 2020-07-23T18:52:08,016Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:08,024Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:08,025Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:08,034Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530327121) {}
[INFO ] 2020-07-23T18:52:08,035Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:08,045Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:08,046Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:08,055Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:08,055Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:08,055Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530327952) {}
[INFO ] 2020-07-23T18:52:08,055Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:09,258Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,270Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,341Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=14d799b3-0cde-4984-b1d1-5c34a8ff15d2, invocation_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, invocation_timestamp=2020-07-23T18:52:08.056Z, origin=Only For Testing, session_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, session_timestamp=2020-07-23T18:52:08.056Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,341Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=14d799b3-0cde-4984-b1d1-5c34a8ff15d2, invocation_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, invocation_timestamp=2020-07-23T18:52:08.056Z, origin=Only For Testing, session_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, session_timestamp=2020-07-23T18:52:08.056Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,355Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=14d799b3-0cde-4984-b1d1-5c34a8ff15d2, invocation_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, invocation_timestamp=2020-07-23T18:52:08.056Z, origin=Only For Testing, session_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, session_timestamp=2020-07-23T18:52:08.056Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,379Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,389Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,407Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,415Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=414c712c-0496-44c9-94be-4cffdf95b718, invocation_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, invocation_timestamp=2020-07-23T18:52:09.242Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ed9083e1-a2fa-4a07-be70-5a2e12d4d8f5, session_timestamp=2020-07-23T18:52:09.242Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,426Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=14d799b3-0cde-4984-b1d1-5c34a8ff15d2, invocation_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, invocation_timestamp=2020-07-23T18:52:08.056Z, origin=Only For Testing, session_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, session_timestamp=2020-07-23T18:52:08.056Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,426Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=14d799b3-0cde-4984-b1d1-5c34a8ff15d2, invocation_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, invocation_timestamp=2020-07-23T18:52:08.056Z, origin=Only For Testing, session_id=91f3dfdb-29a3-4db4-9b7f-152be0fdfe51, session_timestamp=2020-07-23T18:52:08.056Z, thread-id=421, tx_id=021863E3240285F198B448DD3D9784C127846B8E84BDB9174A69F9C0DB262B84}
[INFO ] 2020-07-23T18:52:09,503Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185209.443/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:52:09,504Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:09,504Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:09,532Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:09,536Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:09,536Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:09,542Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:09.443Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:09,946Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:09,948Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185209.443/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:09,948Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:09,960Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:09,963Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:09,963Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,051Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,058Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,059Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,060Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,060Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,104Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,123Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:10,133Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:10,134Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:10,207Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:10,211Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:10,211Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,213Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:10,226Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,236Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:10,239Z [MockNode-10-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,243Z [MockNode-10-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,269Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:10,270Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:52:10,270Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:52:10,277Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,280Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,280Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,280Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,280Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,284Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185209.443/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:52:10,284Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:10,284Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:10,306Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:10,327Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:10,327Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:10,330Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:09.443Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:10,681Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,683Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185209.443/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,683Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,700Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,702Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,702Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,765Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,774Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,775Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,777Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,777Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,820Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:10,823Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:10,824Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:10,824Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:10,890Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:10,890Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:10,906Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:10,906Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,907Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:10,911Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,915Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:10,918Z [MockNode-11-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,921Z [MockNode-11-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,945Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:10,952Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,953Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:10,954Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:10,962Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,963Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:10,971Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,971Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,971Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:10,971Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:10,975Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185209.443/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:52:10,975Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:10,975Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185209.443/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:10,993Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:11,010Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:11,010Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:11,012Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:09.443Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:11,403Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,405Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185209.443/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,405Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,416Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,418Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,418Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,482Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,490Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,491Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,493Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,493Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,543Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:11,548Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:11,549Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:11,549Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:11,638Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:11,639Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:11,658Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:11,658Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,659Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:11,666Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,672Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:11,675Z [MockNode-12-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,678Z [MockNode-12-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:11,708Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:11,714Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,716Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530330211) {}
[INFO ] 2020-07-23T18:52:11,717Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:11,725Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,726Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:11,735Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530330906) {}
[INFO ] 2020-07-23T18:52:11,736Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:11,744Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,745Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:11,753Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,753Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:11,753Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530331658) {}
[INFO ] 2020-07-23T18:52:11,753Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:13,060Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,073Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,162Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=def3aa04-932b-4b8e-84a6-fb1e63cc9ecf, invocation_id=cc73ec26-01b8-48d3-a011-54045432c370, invocation_timestamp=2020-07-23T18:52:11.754Z, origin=Only For Testing, session_id=cc73ec26-01b8-48d3-a011-54045432c370, session_timestamp=2020-07-23T18:52:11.754Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,162Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=def3aa04-932b-4b8e-84a6-fb1e63cc9ecf, invocation_id=cc73ec26-01b8-48d3-a011-54045432c370, invocation_timestamp=2020-07-23T18:52:11.754Z, origin=Only For Testing, session_id=cc73ec26-01b8-48d3-a011-54045432c370, session_timestamp=2020-07-23T18:52:11.754Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,182Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=def3aa04-932b-4b8e-84a6-fb1e63cc9ecf, invocation_id=cc73ec26-01b8-48d3-a011-54045432c370, invocation_timestamp=2020-07-23T18:52:11.754Z, origin=Only For Testing, session_id=cc73ec26-01b8-48d3-a011-54045432c370, session_timestamp=2020-07-23T18:52:11.754Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,203Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,213Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,219Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,227Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=54203583-155f-4fc6-a2de-c3966650fb72, invocation_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, invocation_timestamp=2020-07-23T18:52:13.046Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e8bc8a71-722e-4fa7-b8e2-a56ef597d65a, session_timestamp=2020-07-23T18:52:13.046Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,237Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=def3aa04-932b-4b8e-84a6-fb1e63cc9ecf, invocation_id=cc73ec26-01b8-48d3-a011-54045432c370, invocation_timestamp=2020-07-23T18:52:11.754Z, origin=Only For Testing, session_id=cc73ec26-01b8-48d3-a011-54045432c370, session_timestamp=2020-07-23T18:52:11.754Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,237Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=def3aa04-932b-4b8e-84a6-fb1e63cc9ecf, invocation_id=cc73ec26-01b8-48d3-a011-54045432c370, invocation_timestamp=2020-07-23T18:52:11.754Z, origin=Only For Testing, session_id=cc73ec26-01b8-48d3-a011-54045432c370, session_timestamp=2020-07-23T18:52:11.754Z, thread-id=552, tx_id=1254B92D8B5384D5ADA2E4D6F56764C47A60C27F96F790CFE9AB2DDEF659B643}
[INFO ] 2020-07-23T18:52:13,309Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185213.250/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:52:13,309Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:13,309Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:13,329Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:13,332Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:13,332Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:13,336Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:13.250Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:13,689Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,690Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185213.250/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,690Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,697Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,699Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,699Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,770Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,779Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,780Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,782Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,782Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,823Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:13,843Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:13,852Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:13,852Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:13,945Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:13,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:13,949Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:13,951Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:13,962Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:13,969Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:13,973Z [MockNode-13-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:13,976Z [MockNode-13-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,006Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:14,007Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:52:14,007Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:52:14,012Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:14,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:14,014Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:14,014Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,017Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185213.250/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:52:14,018Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:14,018Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:14,042Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:14,064Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:14,064Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:14,067Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:13.250Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:14,466Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,468Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185213.250/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,468Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,478Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,485Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,485Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,552Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,559Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,560Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,561Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,561Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,610Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:14,614Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:14,615Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:14,615Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:14,689Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:14,689Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:14,709Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:14,709Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,710Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:14,715Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,719Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:14,721Z [MockNode-14-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,725Z [MockNode-14-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,763Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:14,770Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,773Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:14,774Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:14,780Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,781Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:14,787Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,787Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,787Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:14,787Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:14,791Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185213.250/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:52:14,791Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:14,791Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185213.250/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:14,824Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:14,841Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:14,841Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:14,843Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:13.250Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:15,152Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,153Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185213.250/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,153Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,162Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,164Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,164Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,226Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,234Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,235Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,236Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,236Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,300Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:15,305Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:15,306Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:15,306Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:15,399Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:15,400Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:15,421Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:15,421Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,423Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:15,428Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,433Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:15,436Z [MockNode-15-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,440Z [MockNode-15-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:15,477Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:15,485Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,487Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530333949) {}
[INFO ] 2020-07-23T18:52:15,488Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:15,495Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,496Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:15,504Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530334709) {}
[INFO ] 2020-07-23T18:52:15,505Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:15,512Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,513Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:15,520Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,520Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:15,520Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530335421) {}
[INFO ] 2020-07-23T18:52:15,520Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:16,684Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,696Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,763Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=194065c0-35f7-4e97-9668-fa0706d88317, invocation_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, invocation_timestamp=2020-07-23T18:52:15.521Z, origin=Only For Testing, session_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, session_timestamp=2020-07-23T18:52:15.521Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,763Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=194065c0-35f7-4e97-9668-fa0706d88317, invocation_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, invocation_timestamp=2020-07-23T18:52:15.521Z, origin=Only For Testing, session_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, session_timestamp=2020-07-23T18:52:15.521Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,777Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=194065c0-35f7-4e97-9668-fa0706d88317, invocation_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, invocation_timestamp=2020-07-23T18:52:15.521Z, origin=Only For Testing, session_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, session_timestamp=2020-07-23T18:52:15.521Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,803Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,812Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,816Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,821Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=87f73f29-87a7-47fa-910d-ee73f5da139a, invocation_id=87888a54-1645-4d0e-b117-7412332ece81, invocation_timestamp=2020-07-23T18:52:16.669Z, origin=O=Mock Company 1, L=London, C=GB, session_id=87888a54-1645-4d0e-b117-7412332ece81, session_timestamp=2020-07-23T18:52:16.669Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,829Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=194065c0-35f7-4e97-9668-fa0706d88317, invocation_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, invocation_timestamp=2020-07-23T18:52:15.521Z, origin=Only For Testing, session_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, session_timestamp=2020-07-23T18:52:15.521Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,829Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=194065c0-35f7-4e97-9668-fa0706d88317, invocation_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, invocation_timestamp=2020-07-23T18:52:15.521Z, origin=Only For Testing, session_id=27ff2a6c-f222-41fb-a85d-fe92d8a8f021, session_timestamp=2020-07-23T18:52:15.521Z, thread-id=683, tx_id=EE5B95AD56B7EDF845CE8C8EF8E92D86DA3D0023CB0AF18E63033340AEE7E3E4}
[INFO ] 2020-07-23T18:52:16,891Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185216.842/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:52:16,891Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:16,891Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:16,920Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:16,922Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:16,922Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:16,926Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:16.842Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:17,245Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,246Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185216.842/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,246Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,254Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,255Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,255Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,329Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,337Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,338Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,339Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,339Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,379Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:17,424Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:17,433Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:17,433Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:17,508Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:52:17,511Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:17,511Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,512Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:17,524Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,530Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:17,535Z [MockNode-16-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,539Z [MockNode-16-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:17,565Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:17,567Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:52:17,567Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:52:17,572Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,574Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,574Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:17,574Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:17,575Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:17,577Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185216.842/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:52:17,578Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:17,578Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:17,604Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:17,628Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:17,628Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:17,630Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:16.842Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:18,158Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,160Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185216.842/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,160Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,170Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,172Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,172Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,262Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,271Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,275Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,277Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,277Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,341Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:18,346Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:18,347Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:18,347Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:18,467Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:18,469Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:18,506Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:18,506Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,508Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:18,514Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,552Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:18,584Z [MockNode-17-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,590Z [MockNode-17-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:18,676Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:18,702Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,734Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:18,735Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:18,745Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,748Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:18,763Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,764Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:18,765Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:18,768Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:18,774Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185216.842/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:52:18,775Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:52:18,776Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185216.842/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:52:18,998Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:52:19,033Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:19,034Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:52:19,037Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:52:16.842Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:52:20,060Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,061Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185216.842/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,061Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,088Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,090Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,090Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,223Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,238Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,239Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,240Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,240Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,319Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:52:20,324Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:52:20,325Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:20,325Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:20,463Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:52:20,464Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:52:20,490Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:52:20,491Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,492Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:20,500Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,508Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:52:20,516Z [MockNode-18-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,525Z [MockNode-18-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:20,636Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:52:20,643Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,648Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530337511) {}
[INFO ] 2020-07-23T18:52:20,650Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:52:20,660Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,662Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:20,672Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530338506) {}
[INFO ] 2020-07-23T18:52:20,674Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:20,682Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,683Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:52:20,693Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,693Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:20,693Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530340491) {}
[INFO ] 2020-07-23T18:52:20,693Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:52:22,492Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,506Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,589Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c8ef4b67-f123-4d56-98e6-6f2f95dd3a62, invocation_id=40f582fe-c305-4b55-8f3a-72e0c559735c, invocation_timestamp=2020-07-23T18:52:20.697Z, origin=Only For Testing, session_id=40f582fe-c305-4b55-8f3a-72e0c559735c, session_timestamp=2020-07-23T18:52:20.697Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,589Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c8ef4b67-f123-4d56-98e6-6f2f95dd3a62, invocation_id=40f582fe-c305-4b55-8f3a-72e0c559735c, invocation_timestamp=2020-07-23T18:52:20.697Z, origin=Only For Testing, session_id=40f582fe-c305-4b55-8f3a-72e0c559735c, session_timestamp=2020-07-23T18:52:20.697Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,602Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c8ef4b67-f123-4d56-98e6-6f2f95dd3a62, invocation_id=40f582fe-c305-4b55-8f3a-72e0c559735c, invocation_timestamp=2020-07-23T18:52:20.697Z, origin=Only For Testing, session_id=40f582fe-c305-4b55-8f3a-72e0c559735c, session_timestamp=2020-07-23T18:52:20.697Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,618Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,627Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,633Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,639Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=89cd137a-2699-472b-a059-2ae77cbc4781, invocation_id=9eeaad55-a393-4c78-a0dc-6100ba198850, invocation_timestamp=2020-07-23T18:52:22.473Z, origin=O=Mock Company 1, L=London, C=GB, session_id=9eeaad55-a393-4c78-a0dc-6100ba198850, session_timestamp=2020-07-23T18:52:22.473Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,649Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c8ef4b67-f123-4d56-98e6-6f2f95dd3a62, invocation_id=40f582fe-c305-4b55-8f3a-72e0c559735c, invocation_timestamp=2020-07-23T18:52:20.697Z, origin=Only For Testing, session_id=40f582fe-c305-4b55-8f3a-72e0c559735c, session_timestamp=2020-07-23T18:52:20.697Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:52:22,649Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=c8ef4b67-f123-4d56-98e6-6f2f95dd3a62, invocation_id=40f582fe-c305-4b55-8f3a-72e0c559735c, invocation_timestamp=2020-07-23T18:52:20.697Z, origin=Only For Testing, session_id=40f582fe-c305-4b55-8f3a-72e0c559735c, session_timestamp=2020-07-23T18:52:20.697Z, thread-id=814, tx_id=166D0DC75FE2CE4C0FDE5ADD8651AFD4F341BD9913A52E1A36C513B459F650CB}
[INFO ] 2020-07-23T18:53:06,692Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:06,722Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[ERROR] 2020-07-23T18:53:08,978Z [main] internal.Verifier. - Error validating transaction F2334EB25990061C816A31A418B42F4E100A46503A6A9936581977BDC69EE0B4. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:08,985Z [main] internal.Verifier. - Error validating transaction F2334EB25990061C816A31A418B42F4E100A46503A6A9936581977BDC69EE0B4. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have one output states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:28) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:10,141Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:10,141Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[WARN ] 2020-07-23T18:53:10,157Z [main] cordapp.CordappResolver. - The CorDapp (name: Contract: custom-cordapp, Workflow: custom-cordapp, file: custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741) is installed multiple times on the node. The following files correspond to the exact same content: [custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741] {}
[ERROR] 2020-07-23T18:53:10,942Z [main] internal.Verifier. - Error validating transaction 55B6CFF73B1C69941D2BC4CDF35FA4A3A5D2FF88820F84C12F45289AF40E24E8. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:10,945Z [main] internal.Verifier. - Error validating transaction 55B6CFF73B1C69941D2BC4CDF35FA4A3A5D2FF88820F84C12F45289AF40E24E8. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:11,571Z [main] internal.Verifier. - Error validating transaction 8502172012254E9827CE665236BEE979CAF00808FFD8885E7CA1267E2AB33C5A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:11,575Z [main] internal.Verifier. - Error validating transaction 8502172012254E9827CE665236BEE979CAF00808FFD8885E7CA1267E2AB33C5A. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Issuer must be required signer
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:33) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:12,900Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:12,900Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[INFO ] 2020-07-23T18:53:12,950Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:12,950Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[WARN ] 2020-07-23T18:53:13,022Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:53:13,029Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:53:13,523Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-07-23T18:53:13,524Z [main] internal.Verifier. - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-07-23T18:53:13,524Z [main] internal.Verifier. - Error validating transaction B3622867CEB87B72BAE24050140130119BCD3E92FA0D9460AE429DDD5036E904. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[WARN ] 2020-07-23T18:53:13,527Z [main] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-07-23T18:53:13,528Z [main] internal.Verifier. - Error validating transaction B3622867CEB87B72BAE24050140130119BCD3E92FA0D9460AE429DDD5036E904. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Output must be of type TokenState
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:29) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:14,090Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:14,090Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[ERROR] 2020-07-23T18:53:14,654Z [main] internal.Verifier. - Error validating transaction 22816C5ED95DE329839770254A70065CACBED77DBB5CE1128D580C766760D951. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:14,657Z [main] internal.Verifier. - Error validating transaction 22816C5ED95DE329839770254A70065CACBED77DBB5CE1128D580C766760D951. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:15,222Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:15,222Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[ERROR] 2020-07-23T18:53:15,976Z [main] internal.Verifier. - Error validating transaction A321C26DBD732A521EB95585E1D09C631FDDD269538C735A1EC39E8E5BAEB062. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:15,980Z [main] internal.Verifier. - Error validating transaction A321C26DBD732A521EB95585E1D09C631FDDD269538C735A1EC39E8E5BAEB062. [errorCode=1knpxvt, moreInformationAt=https://errors.corda.net/OS/4.3/1knpxvt] {}
java.lang.IllegalArgumentException: List has more than one element.
	at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:480) ~[kotlin-stdlib-1.2.71.jar:1.2.71-release-64 (1.2.71)]
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:79) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:16,556Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:16,556Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[ERROR] 2020-07-23T18:53:17,141Z [main] internal.Verifier. - Error validating transaction 746D12885200679ADA7895008A6B53EDA794C4DA978096AB3C481AB9F1E2F66E. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Amount must be positive
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:35) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:17,145Z [main] internal.Verifier. - Error validating transaction 746D12885200679ADA7895008A6B53EDA794C4DA978096AB3C481AB9F1E2F66E. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Amount must be positive
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:35) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:17,807Z [main] internal.Verifier. - Error validating transaction 69D75FD645BCF8B2D26E39447389D836BC49CC34C68BA9037551EAD080959FCA. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Amount must be positive
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:35) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:17,810Z [main] internal.Verifier. - Error validating transaction 69D75FD645BCF8B2D26E39447389D836BC49CC34C68BA9037551EAD080959FCA. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Amount must be positive
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:35) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:19,196Z [main] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:53:19,196Z [main] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/generated-custom-cordapps/20200723-185306.317/custom-cordapp_1_5_369b036a-0bc2-4771-a2e9-35040d357741.jar {}
[WARN ] 2020-07-23T18:53:19,267Z [main] contracts.AttachmentConstraint. - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[ERROR] 2020-07-23T18:53:19,908Z [main] internal.Verifier. - Error validating transaction 460221A41893175A1DBCD993A66A2B08C54850AB84EA68A84C6B756ADAB0F0B3. [errorCode=vj2f0u, moreInformationAt=https://errors.corda.net/OS/4.3/vj2f0u] {}
java.lang.IllegalStateException: Required bootcamp.TokenContract.Commands command
	at net.corda.core.contracts.ContractsDSL.requireSingleCommand(ContractsDSL.kt:81) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:298) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:336) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:19,999Z [main] internal.Verifier. - Error validating transaction B2A5E4D360BF9E6B03054D04F3459D0203518073475BD427618874A8D8CB5501. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[ERROR] 2020-07-23T18:53:20,007Z [main] internal.Verifier. - Error validating transaction B2A5E4D360BF9E6B03054D04F3459D0203518073475BD427618874A8D8CB5501. [errorCode=1g78gsj, moreInformationAt=https://errors.corda.net/OS/4.3/1g78gsj] {}
java.lang.IllegalArgumentException: Failed requirement: Transaction must have no input states
	at net.corda.core.contracts.Requirements.using(ContractsDSL.kt:26) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:27) ~[main/:?]
	at net.corda.core.contracts.ContractsDSL.requireThat(ContractsDSL.kt:30) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_252]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_252]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_252]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_252]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) ~[junit-4.12.jar:4.12]
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) ~[junit-rt.jar:?]
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58) ~[junit-rt.jar:?]
[INFO ] 2020-07-23T18:53:58,259Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in /home/eamonn/723bootcamp ... {}
[INFO ] 2020-07-23T18:53:58,613Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:54:00,396Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:54:01,279Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-07-23T18:54:01,296Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-07-23T18:54:01,297Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:54:01,870Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:54:01,890Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-07-23T18:54:02,276Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:54:02,286Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:54:02,286Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-07-23T18:54:02,437Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:54:02,447Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:54:03,001Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-07-23T18:54:03,233Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:54:03,233Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:54:03,264Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:54:03,264Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-07-23T18:54:03,265Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-07-23T18:54:04,084Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-07-23T18:54:04,084Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:54:04,195Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,215Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:54:04,276Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-07-23T18:54:04,398Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:54:04,399Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-07-23T18:54:04,419Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:54:04,449Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-07-23T18:54:04,449Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,479Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,500Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-07-23T18:54:04,530Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,530Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,540Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,541Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,541Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,541Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-07-23T18:54:04,541Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-07-23T18:54:04,541Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,550Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-07-23T18:54:04,551Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-07-23T18:54:04,561Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:54:04,561Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project '723bootcamp' {}
[INFO ] 2020-07-23T18:54:04,561Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-07-23T18:54:04,562Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:54:04,571Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in /home/eamonn/723bootcamp/.gradle {}
[INFO ] 2020-07-23T18:54:04,571Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-07-23T18:54:04,610Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-07-23T18:54:04,835Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185352.516/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:04,841Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:04,864Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:05,737Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:05,831Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:05,831Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:06,022Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:53:52.452Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:10,255Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:10,259Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185352.516/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:10,259Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:10,296Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:10,395Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:10,401Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:12,329Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:12,921Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:12,924Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:12,928Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:12,928Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:13,020Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:13,068Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:13,092Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:13,093Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:13,364Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:13,375Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:13,376Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:13,382Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:13,576Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:13,642Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:13,661Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:13,695Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:13,756Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:13,763Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:13,767Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:14,280Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:14,300Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:14,302Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:14,302Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:14,303Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:14,308Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185352.516/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:14,308Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:14,308Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/1/cordapps/723bootcamp.jar {}
[WARN ] 2020-07-23T18:54:14,329Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: 723bootcamp) is installed multiple times on the node. The following files correspond to the exact same content: [723bootcamp] {}
[INFO ] 2020-07-23T18:54:14,356Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:14,391Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:14,391Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:14,394Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:53:52.452Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:15,088Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,090Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185352.516/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,090Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,109Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,111Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,111Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,238Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,256Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,257Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,260Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,260Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,334Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:15,341Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:15,344Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:15,344Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:15,485Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:15,487Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:15,510Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:15,510Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,513Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:15,522Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,531Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:15,538Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,545Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:15,600Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:15,611Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,614Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:15,619Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:15,634Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,635Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:15,648Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,648Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:15,649Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:15,649Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:15,652Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185352.516/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:15,653Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:15,653Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185352.516/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:15,687Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:15,711Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:15,711Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:15,715Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:53:52.452Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:16,183Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,185Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185352.516/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,185Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,222Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,225Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,225Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,338Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,349Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,351Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,353Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,353Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,414Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:16,420Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:16,422Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:16,422Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:16,561Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:16,563Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:16,588Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:16,588Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,591Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:16,601Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,612Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:16,615Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,621Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:16,671Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:16,681Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,688Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530453375) {}
[INFO ] 2020-07-23T18:54:16,689Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:16,702Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,703Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:16,715Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530455510) {}
[INFO ] 2020-07-23T18:54:16,716Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:16,726Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,728Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:16,738Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,738Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:16,738Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530456588) {}
[INFO ] 2020-07-23T18:54:16,738Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-07-23T18:54:17,396Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155}
[WARN ] 2020-07-23T18:54:17,396Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155}
[INFO ] 2020-07-23T18:54:19,464Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,514Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,641Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,641Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,726Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,768Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,799Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,807Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,818Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=b5ac874f-c1b1-42a7-bbfb-84cbdb819ee4, invocation_id=dac008ea-2851-4ba4-be07-873fc0ee149f, invocation_timestamp=2020-07-23T18:54:19.366Z, origin=O=Mock Company 1, L=London, C=GB, session_id=dac008ea-2851-4ba4-be07-873fc0ee149f, session_timestamp=2020-07-23T18:54:19.366Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,851Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,851Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=7b6d15a1-5900-48d4-a183-f3865cad7c6d, invocation_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, invocation_timestamp=2020-07-23T18:54:16.776Z, origin=Only For Testing, session_id=1ac4572d-7a53-4b37-b20d-68019c4e800c, session_timestamp=2020-07-23T18:54:16.776Z, thread-id=155, tx_id=D01032FB0B29CB85BF871BB5388BCECB3168537D31CF6DCCD68F2B0D8D5EF5BD}
[INFO ] 2020-07-23T18:54:19,963Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185419.887/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:19,964Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:19,964Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:20,011Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:20,015Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:20,015Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:20,023Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:19.887Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:20,716Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,719Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185419.887/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,719Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,745Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,747Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,748Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,893Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,917Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,919Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,922Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:20,922Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:21,017Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:21,058Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:21,079Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:21,079Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:21,251Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:21,258Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:21,259Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,262Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:21,285Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,299Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:21,317Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,327Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:21,368Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:21,370Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:21,370Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:21,380Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,386Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,386Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:21,386Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:21,386Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:21,395Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185419.887/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:21,396Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:21,396Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:21,441Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:21,476Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:21,476Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:21,482Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:19.887Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:22,001Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,003Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185419.887/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,003Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,020Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,023Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,023Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,171Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,182Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,183Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,185Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,185Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,274Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:22,280Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:22,282Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:22,282Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:22,450Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:22,453Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:22,481Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:22,481Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,483Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:22,494Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,505Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:22,509Z [MockNode-5-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,518Z [MockNode-5-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:22,571Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:22,581Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,586Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:22,587Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:22,600Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,601Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:22,614Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,614Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:22,614Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:22,614Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:22,619Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185419.887/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:22,619Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:22,619Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185419.887/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:22,662Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:22,688Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:22,688Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:22,692Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:19.887Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:23,248Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,250Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185419.887/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,250Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,267Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,269Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,269Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,375Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,386Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,387Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,388Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,388Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,452Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:23,457Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:23,459Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:23,459Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:23,610Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:23,611Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:23,636Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:23,636Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,639Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:23,649Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,660Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:23,673Z [MockNode-6-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,682Z [MockNode-6-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:23,733Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:23,745Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,751Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530461259) {}
[INFO ] 2020-07-23T18:54:23,753Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:23,766Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,768Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:23,780Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530462481) {}
[INFO ] 2020-07-23T18:54:23,782Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:23,794Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,795Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:23,809Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,809Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:23,809Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530463636) {}
[INFO ] 2020-07-23T18:54:23,809Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:25,835Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:25,849Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:25,990Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=870047b4-2a2d-4bbb-b207-d046d571ea98, invocation_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, invocation_timestamp=2020-07-23T18:54:23.811Z, origin=Only For Testing, session_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, session_timestamp=2020-07-23T18:54:23.811Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:25,990Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=870047b4-2a2d-4bbb-b207-d046d571ea98, invocation_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, invocation_timestamp=2020-07-23T18:54:23.811Z, origin=Only For Testing, session_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, session_timestamp=2020-07-23T18:54:23.811Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,022Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=870047b4-2a2d-4bbb-b207-d046d571ea98, invocation_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, invocation_timestamp=2020-07-23T18:54:23.811Z, origin=Only For Testing, session_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, session_timestamp=2020-07-23T18:54:23.811Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,051Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,065Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,074Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,085Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=75104079-b8a1-4ce9-8558-4f710c49ab32, invocation_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, invocation_timestamp=2020-07-23T18:54:25.813Z, origin=O=Mock Company 1, L=London, C=GB, session_id=20f87d61-8d15-4e86-a0c0-44d427dd8e5d, session_timestamp=2020-07-23T18:54:25.813Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,098Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=870047b4-2a2d-4bbb-b207-d046d571ea98, invocation_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, invocation_timestamp=2020-07-23T18:54:23.811Z, origin=Only For Testing, session_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, session_timestamp=2020-07-23T18:54:23.811Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,098Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=870047b4-2a2d-4bbb-b207-d046d571ea98, invocation_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, invocation_timestamp=2020-07-23T18:54:23.811Z, origin=Only For Testing, session_id=cb726afd-395f-41c2-aed5-9eae0bcbc3bc, session_timestamp=2020-07-23T18:54:23.811Z, thread-id=290, tx_id=83A34106BD30096C261143ACD24E73482CD6198DF66EBF651F78818931359E75}
[INFO ] 2020-07-23T18:54:26,215Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185426.133/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:26,215Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:26,215Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:26,311Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:26,319Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:26,319Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:26,328Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:26.133Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:26,809Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,811Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185426.133/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,811Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,828Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,849Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,849Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,959Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,970Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,971Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,974Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:26,974Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,039Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,064Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:27,078Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:27,079Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:27,218Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:27,224Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:27,224Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,228Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:27,249Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,260Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:27,266Z [MockNode-7-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,280Z [MockNode-7-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:27,349Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:27,351Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:27,352Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:27,360Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,363Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,363Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:27,364Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:27,364Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:27,368Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185426.133/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:27,369Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:27,369Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:27,410Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:27,441Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:27,441Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:27,444Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:26.133Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:27,963Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,967Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185426.133/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,967Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,982Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,984Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:27,984Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,077Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,088Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,089Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,091Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,091Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,171Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:28,178Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:28,179Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:28,179Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:28,292Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:28,293Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:28,315Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:28,315Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,318Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:28,325Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,333Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:28,343Z [MockNode-8-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,354Z [MockNode-8-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:28,447Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:28,454Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,457Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:28,458Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:28,467Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,469Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:28,478Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,478Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:28,479Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:28,479Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:28,485Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185426.133/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:28,485Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:28,485Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185426.133/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:28,514Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:28,534Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:28,534Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:28,537Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:26.133Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:29,012Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,014Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185426.133/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,014Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,034Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,036Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,036Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,132Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,143Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,145Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,147Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,147Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,217Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:29,230Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:29,231Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:29,231Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:29,380Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:29,381Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:29,410Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:29,411Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,413Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:29,421Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,428Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:29,434Z [MockNode-9-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,441Z [MockNode-9-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:29,482Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:29,490Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,492Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530467224) {}
[INFO ] 2020-07-23T18:54:29,493Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:29,503Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,505Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:29,516Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530468315) {}
[INFO ] 2020-07-23T18:54:29,517Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:29,531Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,533Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:29,543Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,543Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:29,544Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530469410) {}
[INFO ] 2020-07-23T18:54:29,544Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:31,155Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,168Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,267Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=94fd260a-411f-4e41-815b-79732b5ecc00, invocation_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, invocation_timestamp=2020-07-23T18:54:29.550Z, origin=Only For Testing, session_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, session_timestamp=2020-07-23T18:54:29.550Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,267Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=94fd260a-411f-4e41-815b-79732b5ecc00, invocation_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, invocation_timestamp=2020-07-23T18:54:29.550Z, origin=Only For Testing, session_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, session_timestamp=2020-07-23T18:54:29.550Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,291Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=94fd260a-411f-4e41-815b-79732b5ecc00, invocation_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, invocation_timestamp=2020-07-23T18:54:29.550Z, origin=Only For Testing, session_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, session_timestamp=2020-07-23T18:54:29.550Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,307Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,315Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,321Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,329Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=b0db6e01-f9fd-4bfa-892e-01551a142ea8, invocation_id=e668f410-d19c-4c6f-9e13-03d10b766069, invocation_timestamp=2020-07-23T18:54:31.135Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e668f410-d19c-4c6f-9e13-03d10b766069, session_timestamp=2020-07-23T18:54:31.135Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,338Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=94fd260a-411f-4e41-815b-79732b5ecc00, invocation_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, invocation_timestamp=2020-07-23T18:54:29.550Z, origin=Only For Testing, session_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, session_timestamp=2020-07-23T18:54:29.550Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,338Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=94fd260a-411f-4e41-815b-79732b5ecc00, invocation_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, invocation_timestamp=2020-07-23T18:54:29.550Z, origin=Only For Testing, session_id=aa36ad3a-2c58-483f-a3af-f83fe09dd0b7, session_timestamp=2020-07-23T18:54:29.550Z, thread-id=421, tx_id=879713AEB22EF780C5030AEC864B56F2420F6E22FC4C6C20ED73046806B623A8}
[INFO ] 2020-07-23T18:54:31,416Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185431.354/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:31,417Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:31,417Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:31,446Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:31,450Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:31,450Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:31,456Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:31.354Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:31,922Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:31,923Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185431.354/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:31,923Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:31,935Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:31,937Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:31,937Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,026Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,035Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,037Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,045Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,045Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,109Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,133Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:32,144Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:32,144Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:32,258Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:32,262Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:32,262Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,264Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:32,281Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,294Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:32,302Z [MockNode-10-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,307Z [MockNode-10-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:32,363Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:32,365Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:32,365Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:32,371Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,380Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,380Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:32,381Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:32,381Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:32,385Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185431.354/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:32,385Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:32,385Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:32,409Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:32,430Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:32,430Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:32,433Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:31.354Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:32,850Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,851Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185431.354/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,851Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,863Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,865Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,865Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,940Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,955Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,956Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,957Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:32,957Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,014Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,020Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:33,021Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:33,021Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:33,148Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:33,149Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:33,172Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:33,172Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,174Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:33,181Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,188Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:33,191Z [MockNode-11-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,201Z [MockNode-11-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:33,244Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:33,252Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,254Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:33,255Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:33,265Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,267Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:33,277Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,277Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:33,277Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:33,277Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:33,281Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185431.354/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:33,281Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:33,282Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185431.354/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:33,312Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:33,332Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:33,332Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:33,335Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:31.354Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:33,789Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,791Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185431.354/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,791Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,801Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,803Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,803Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:33,916Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,008Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,009Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,010Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,010Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,069Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:34,074Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:34,075Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:34,075Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:34,203Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:34,205Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:34,231Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:34,231Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,233Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:34,240Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,251Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:34,254Z [MockNode-12-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,258Z [MockNode-12-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:34,290Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:34,297Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,301Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530472262) {}
[INFO ] 2020-07-23T18:54:34,302Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:34,311Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,312Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:34,323Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530473172) {}
[INFO ] 2020-07-23T18:54:34,325Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:34,335Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,336Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:34,345Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,345Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:34,345Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530474231) {}
[INFO ] 2020-07-23T18:54:34,345Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:35,762Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,782Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,874Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=2204295e-aa8f-418a-a47e-24ef34277340, invocation_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, invocation_timestamp=2020-07-23T18:54:34.354Z, origin=Only For Testing, session_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, session_timestamp=2020-07-23T18:54:34.354Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,874Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=2204295e-aa8f-418a-a47e-24ef34277340, invocation_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, invocation_timestamp=2020-07-23T18:54:34.354Z, origin=Only For Testing, session_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, session_timestamp=2020-07-23T18:54:34.354Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,892Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=2204295e-aa8f-418a-a47e-24ef34277340, invocation_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, invocation_timestamp=2020-07-23T18:54:34.354Z, origin=Only For Testing, session_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, session_timestamp=2020-07-23T18:54:34.354Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,915Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,925Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,930Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,938Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000008, flow-id=18a3b790-f81c-4419-b36f-1de6992473e4, invocation_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, invocation_timestamp=2020-07-23T18:54:35.741Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3971a4fa-b8d2-4fd1-821d-1cd18b1bfb92, session_timestamp=2020-07-23T18:54:35.741Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,946Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=2204295e-aa8f-418a-a47e-24ef34277340, invocation_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, invocation_timestamp=2020-07-23T18:54:34.354Z, origin=Only For Testing, session_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, session_timestamp=2020-07-23T18:54:34.354Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:35,946Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=2204295e-aa8f-418a-a47e-24ef34277340, invocation_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, invocation_timestamp=2020-07-23T18:54:34.354Z, origin=Only For Testing, session_id=e4fe6f0e-fc1e-49c9-867a-de23749db05b, session_timestamp=2020-07-23T18:54:34.354Z, thread-id=552, tx_id=853C8C0C364402F6C26FB3EE18C321B586E1174EBA73AFFB1D0BA1287AAF80CD}
[INFO ] 2020-07-23T18:54:36,022Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185435.971/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:36,022Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:36,022Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:36,049Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:36,052Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:36,052Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:36,059Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:35.971Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:36,453Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,454Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185435.971/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,454Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,464Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,466Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,466Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,537Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,556Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,557Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,559Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,559Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,658Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:36,680Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:36,689Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:36,689Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:36,807Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:36,814Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:36,815Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,818Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:36,836Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,851Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:36,863Z [MockNode-13-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,867Z [MockNode-13-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:36,903Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:36,905Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:36,905Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:36,911Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,914Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,914Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:36,914Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:36,914Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:36,918Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185435.971/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:36,918Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:36,918Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:36,955Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:36,973Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:36,973Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:36,975Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:35.971Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:37,465Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,466Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185435.971/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,466Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,479Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,483Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,483Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,613Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,620Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,621Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,623Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,623Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,693Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:37,697Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:37,717Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:37,717Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:37,864Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:37,865Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:37,887Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:37,887Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:37,889Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:37,896Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:37,903Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:37,909Z [MockNode-14-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:37,913Z [MockNode-14-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:37,985Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:37,995Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:38,000Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:38,003Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:38,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:38,015Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:38,026Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:38,027Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:38,028Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:38,029Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:38,035Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185435.971/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:38,036Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:38,037Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185435.971/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:38,086Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:38,110Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:38,112Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:38,115Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:35.971Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:38,534Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,536Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185435.971/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,536Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,549Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,551Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,551Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,626Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,634Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,635Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,636Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,636Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,690Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:38,695Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:38,696Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:38,696Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:38,861Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:38,862Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:38,887Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:38,887Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:38,889Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:38,896Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:38,902Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:38,909Z [MockNode-15-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:38,915Z [MockNode-15-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:38,971Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:38,977Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:38,979Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530476815) {}
[INFO ] 2020-07-23T18:54:38,980Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:38,989Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:38,990Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:38,997Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530477887) {}
[INFO ] 2020-07-23T18:54:38,998Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:39,004Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:39,005Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:39,012Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:39,012Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:39,014Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530478887) {}
[INFO ] 2020-07-23T18:54:39,015Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:40,413Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,424Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,504Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=b0edea61-81c2-4bbd-9b9a-0270b1513120, invocation_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, invocation_timestamp=2020-07-23T18:54:39.015Z, origin=Only For Testing, session_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, session_timestamp=2020-07-23T18:54:39.015Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,504Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=b0edea61-81c2-4bbd-9b9a-0270b1513120, invocation_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, invocation_timestamp=2020-07-23T18:54:39.015Z, origin=Only For Testing, session_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, session_timestamp=2020-07-23T18:54:39.015Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,522Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=b0edea61-81c2-4bbd-9b9a-0270b1513120, invocation_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, invocation_timestamp=2020-07-23T18:54:39.015Z, origin=Only For Testing, session_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, session_timestamp=2020-07-23T18:54:39.015Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,542Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,551Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,557Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,563Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000010, flow-id=63bcb8e8-1eb5-4b69-828b-a41500c08b13, invocation_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, invocation_timestamp=2020-07-23T18:54:40.397Z, origin=O=Mock Company 1, L=London, C=GB, session_id=aa111a51-3b07-4c68-b119-ad91b68ca4b8, session_timestamp=2020-07-23T18:54:40.397Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,572Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=b0edea61-81c2-4bbd-9b9a-0270b1513120, invocation_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, invocation_timestamp=2020-07-23T18:54:39.015Z, origin=Only For Testing, session_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, session_timestamp=2020-07-23T18:54:39.015Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,572Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=b0edea61-81c2-4bbd-9b9a-0270b1513120, invocation_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, invocation_timestamp=2020-07-23T18:54:39.015Z, origin=Only For Testing, session_id=be34fee5-8f36-4e79-843d-5bbeb4205ecc, session_timestamp=2020-07-23T18:54:39.015Z, thread-id=683, tx_id=B7897E16697F681CAF65141BB403A795919613A20C04E66FB3B7E8EBAAB8EFEF}
[INFO ] 2020-07-23T18:54:40,631Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185440.585/nodes/0/cordapps] {}
[INFO ] 2020-07-23T18:54:40,632Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/0/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:40,632Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/0/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:40,666Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:40,669Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:40,669Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:40,675Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:40.585Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:41,386Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,388Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185440.585/nodes/0/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,388Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,398Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,400Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,400Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,488Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,497Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,500Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,501Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,501Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,554Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:41,574Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:41,586Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:41,586Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:41,700Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-23T18:54:41,705Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:41,705Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,707Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:41,721Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,731Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:41,736Z [MockNode-16-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,740Z [MockNode-16-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:41,765Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:41,766Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-23T18:54:41,767Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-23T18:54:41,772Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,775Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,775Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:41,775Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:41,775Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:41,779Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185440.585/nodes/1/cordapps] {}
[INFO ] 2020-07-23T18:54:41,779Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/1/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:41,779Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/1/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:41,797Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:41,821Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:41,821Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:41,823Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:40.585Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:42,153Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,155Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185440.585/nodes/1/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,155Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,173Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,174Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,174Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,248Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,255Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,256Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,257Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,257Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,305Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,310Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:42,310Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:42,310Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:42,397Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:42,398Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:42,419Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:42,419Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,430Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:42,436Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,442Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:42,447Z [MockNode-17-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,451Z [MockNode-17-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:42,488Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:42,494Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,496Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:42,497Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:42,505Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,506Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:42,513Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,513Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:42,513Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:42,513Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:42,517Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build/mock-network/20200723-185440.585/nodes/2/cordapps] {}
[INFO ] 2020-07-23T18:54:42,517Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/2/cordapps/723bootcamp.jar, rootPackageName=null) {}
[INFO ] 2020-07-23T18:54:42,518Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/home/eamonn/723bootcamp/build/mock-network/20200723-185440.585/nodes/2/cordapps/723bootcamp.jar {}
[INFO ] 2020-07-23T18:54:42,555Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-23T18:54:42,575Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:42,575Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-07-23T18:54:42,577Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-23T18:54:40.585Z
      epoch=1
  } {}
[INFO ] 2020-07-23T18:54:42,902Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,903Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20200723-185440.585/nodes/2/network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,903Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,913Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,915Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:42,915Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,012Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,020Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,021Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,023Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,023Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,079Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-23T18:54:43,083Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-23T18:54:43,084Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:43,084Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:43,163Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-23T18:54:43,164Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-23T18:54:43,180Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-23T18:54:43,180Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,181Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:43,186Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,191Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-23T18:54:43,196Z [MockNode-18-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,201Z [MockNode-18-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:43,235Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=FD55008D6D74C2671C0B593080BA3F94F5504E310E8F820EAD5F6E73415E4FD7 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-07-23T18:54:43,241Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,244Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1595530481705) {}
[INFO ] 2020-07-23T18:54:43,246Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-23T18:54:43,255Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,257Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:43,272Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1595530482419) {}
[INFO ] 2020-07-23T18:54:43,274Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:43,282Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,285Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-23T18:54:43,297Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,298Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:43,299Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1595530483180) {}
[INFO ] 2020-07-23T18:54:43,300Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-23T18:54:44,337Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,350Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,412Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=09ebc976-50ea-4bd2-8262-15c81583eb7c, invocation_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, invocation_timestamp=2020-07-23T18:54:43.301Z, origin=Only For Testing, session_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, session_timestamp=2020-07-23T18:54:43.301Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,412Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=09ebc976-50ea-4bd2-8262-15c81583eb7c, invocation_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, invocation_timestamp=2020-07-23T18:54:43.301Z, origin=Only For Testing, session_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, session_timestamp=2020-07-23T18:54:43.301Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,429Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=09ebc976-50ea-4bd2-8262-15c81583eb7c, invocation_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, invocation_timestamp=2020-07-23T18:54:43.301Z, origin=Only For Testing, session_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, session_timestamp=2020-07-23T18:54:43.301Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,445Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,451Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,455Z [Mock network] corda.flow. - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,461Z [Mock network] corda.flow. - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=83faf9b6-e590-41df-a27c-8961f5d25ecf, invocation_id=021d075b-e723-4b81-95ac-2ebd3b275a66, invocation_timestamp=2020-07-23T18:54:44.324Z, origin=O=Mock Company 1, L=London, C=GB, session_id=021d075b-e723-4b81-95ac-2ebd3b275a66, session_timestamp=2020-07-23T18:54:44.324Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,469Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=09ebc976-50ea-4bd2-8262-15c81583eb7c, invocation_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, invocation_timestamp=2020-07-23T18:54:43.301Z, origin=Only For Testing, session_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, session_timestamp=2020-07-23T18:54:43.301Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
[INFO ] 2020-07-23T18:54:44,469Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=09ebc976-50ea-4bd2-8262-15c81583eb7c, invocation_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, invocation_timestamp=2020-07-23T18:54:43.301Z, origin=Only For Testing, session_id=6c955510-af24-4d85-8e1d-54fd306e4e4a, session_timestamp=2020-07-23T18:54:43.301Z, thread-id=814, tx_id=B752F839962EC04ED7431D90A11BE046DF91334B0D880AB4D089A53026A239A7}
